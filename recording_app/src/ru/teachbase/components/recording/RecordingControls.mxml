<?xml version="1.0"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:c="ru.teachbase.components.*" xmlns:ui="ru.teachbase.components.ui.*"
          creationComplete="creationCompleteHandler(event)"
          implements="ru.teachbase.utils.interfaces.ILocalable">
    <fx:Declarations>
        <s:Callout id="volumeCallout"
                   width="80"
                   skinClass="ru.teachbase.skins.actionbar.AudioCalloutSkin"
                   verticalPosition="auto"
                   horizontalPosition="middle"
                   mouseDownOutside="volumeCallout.close(true);"
                   open="onVolumeOpen(event)"
                   close="onVolumeClose(event)"
                   backgroundAlpha="0">
            <s:layout>
                <s:VerticalLayout gap="0"
                                  horizontalAlign="center"
                        />
            </s:layout>
            <s:VSlider id="volumeSlider"
                       minimum="0"
                       maximum="100"
                       stepSize="1"
                       verticalCenter="0"
                       showDataTip="true"
                       change="volumeSliderChangeHandler(event)"
                       skinClass="ru.teachbase.skins.actionbar.VerticalAudioSliderSkin"
                    />
        </s:Callout>
    </fx:Declarations>

    <fx:Script><![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.events.ChangeEvent;
        import ru.teachbase.manage.rtmp.PlayerStates;
        import ru.teachbase.manage.rtmp.RTMPPretender;
        import ru.teachbase.manage.session.model.CurrentUser;
        import ru.teachbase.model.App;
        import ru.teachbase.utils.DelayedWriter;
        import ru.teachbase.utils.Strings;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private const VOLUME_HIDE_TIME:int = 2000;

        private var _volumeSaver:DelayedWriter;
        private var _volumeID:uint;

        private const user:CurrentUser = App.user;
        private const manager:RTMPPretender = App.rtmp as RTMPPretender;


        private function volumeSliderChangeHandler(e:Event):void {
            SoundMixer.soundTransform = new SoundTransform(volumeSlider.value / 100);

            _volumeSaver.write(volumeSlider.value);

            clearInterval(_volumeID);
            _volumeID = setTimeout(onVolumeClose, VOLUME_HIDE_TIME);
        }


        private function onVolumeOpen(evt:Event):void {
            volumeButton.selected = true;
            volumeSlider.value = App.user.settings.volumeLevel;

            _volumeID = setTimeout(onVolumeClose, VOLUME_HIDE_TIME);

        }

        private function onVolumeClose(evt:Event = null):void {
            volumeButton.selected = false;
            volumeCallout.close(true);
        }

        public function localize():void {
            volumeButton && (volumeButton.toolTip = translate("volume", 'actionbar'));
            pauseButton && (pauseButton.toolTip = translate("pause", 'actionbar'));
            playButton && (playButton.toolTip = translate("play", 'actionbar'));
        }

        private function creationCompleteHandler(e:FlexEvent):void {

            _volumeSaver = new DelayedWriter(1000, function (value:Number):void {
                user.settings.volumeLevel = value;
            });

            duration_txt.text = Strings.digits(int(manager.player.duration / 1000));

            updatePosition();

            manager.player.addEventListener(ChangeEvent.CHANGED, playerStateHandler);

        }


        protected function playerStateHandler(e:ChangeEvent):void {

            if (e.property == 'state') {
                playButton.visible = playButton.includeInLayout = manager.player.state != PlayerStates.PLAYING;
                pauseButton.visible = pauseButton.includeInLayout = !playButton.visible;
            } else if (e.property == 'position') updatePosition();

        }


        protected function seekHandler(e:MouseEvent):void {

            manager.player.seek(int(((e.target.mouseX / e.target.width) * manager.player.duration)));

        }


        protected function updatePosition():void {

            progressBar.progress = manager.player.position / manager.player.duration;

            position_txt.text = Strings.digits(int(manager.player.position / 1000));

        }
        ]]></fx:Script>

    <c:ActionBarButton id="volumeButton"
                       initialize="with(volumeButton){
                                          icon=style('actionBar','audioIco');
                                          iconOver=style('actionBar','audioIcoOver');
                                          iconSelected=style('actionBar','audioIco');
                                          toolTip=translate('volume','actionbar');
                                          }"
                       click="volumeCallout.open(volumeButton);"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
            >
    </c:ActionBarButton>

    <c:ActionBarButton id="playButton"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(playButton){
                                        toolTip=translate('play','actionbar');
                                        icon=style('actionBar','playIco');
                                        iconOver=style('actionBar','playIcoOver');
                                        iconSelected=style('actionBar','playIco');
                                        }"
                       change="manager.player.play()"
                       preventToggle="true"
            >
    </c:ActionBarButton>

    <c:ActionBarButton id="pauseButton"
                       visible = "false"
                       includeInLayout="false"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(pauseButton){
                                        toolTip=translate('pause','actionbar');
                                        icon=style('actionBar','pauseIco');
                                        iconOver=style('actionBar','pauseIcoOver');
                                        iconSelected=style('actionBar','pauseIco');
                                        }"
                       change="manager.player.pause()"
                       preventToggle="true"
            >
    </c:ActionBarButton>

    <s:Group width="500">
        <s:RichText id="position_txt" width="40" left="10" color="#f1f1f1" top="18" fontSize="12"/>
        <ui:ProgressBar width="100%" top="15" id="progressBar"  left="60" right="60" height="13" click="seekHandler(event)"/>
        <s:RichText id="duration_txt" width="40" right="10" color="#cecece" top="18" fontSize="12"/>
    </s:Group>
</s:HGroup>
