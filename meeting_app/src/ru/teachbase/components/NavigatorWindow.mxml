<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         implements="ru.teachbase.behaviours.interfaces.IDragCoordinateSpace"
         maxWidth="150"
         maxHeight="120"
         width="80"
         height="100"
         xmlns:behaviours="ru.teachbase.behaviours.dragdrop.*"
         creationComplete="creationComplete(event)"
        >
    <fx:Metadata>
		[Style(name="backgroundColor", inherit="no", type="uint")]
		[Style(name="backgroundAlpha", inherit="no", type="Number")]
		[Style(name="borderColor", inherit="no", type="uint")]
		[Style(name="padding", inherit="no", type="uint")]
		[Event(name="changed", type="ru.teachbase.events.ChangeEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<behaviours:DragBehavior id="drag" 
								 mouseCoordinateSpace="{this}"
								 dragStart="dragStartHandler(event)"
								 dragEnd="dragEndHandler(event)"
								 dispatchToTarget="false"
								 useCapture="false"
								 considerParent="false"
								 bounds="{this}"
								 />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
        import mx.core.EventPriority;
        import mx.events.FlexEvent;

        import ru.teachbase.behaviours.dragdrop.DragEvent;

        import ru.teachbase.events.ChangeEvent;
        import ru.teachbase.utils.chain.Chain;
        import ru.teachbase.utils.chain.ChainMode;

        [Bindable]
        private var _pageSnapshot:Object;

        private var _curentSize:Number;

        private var _startX:Number;
        private var _startY:Number;

        private const ratio:Number = maxWidth / maxHeight;

        private var _target:DisplayObject;
        private var _viewport:DisplayObject;

        private var _disposed:Boolean;

        private var _chain:Chain = Chain.initByMode(ChainMode.ONLY_LAST);

        private var _contentW:Number = 1;
        private var _contentH:Number = 1;
        private var _scale:Number;

        public function set snapshotSource(src:Object):void {
            _pageSnapshot = src;
        }


        public function zoom(value:Number):void {

            updateBorder();

        }

        public function rotate(flag:Boolean):void {
            if (flag) {
                rotateCW()
            } else {
                rotateCCW()
            }

            updateBorder();
        }

        protected function rotateCW(event:MouseEvent = null):void {

            var _m:Matrix = transform.matrix.clone();
            _m.rotate(Math.PI / 2);
            _m.translate((height + width) / 2, (height - width) / 2);
            transform.matrix = _m;

        }

        protected function rotateCCW(event:MouseEvent = null):void {

            var _m:Matrix = transform.matrix.clone();
            _m.rotate(-Math.PI / 2);
            _m.translate((width - height) / 2, (height + width) / 2);
            transform.matrix = _m;

        }

        private function dragStartHandler(evt:DragEvent):void {
            stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
            _chain.startDispatchTimer(this);
            removeEventListener(MouseEvent.MOUSE_UP, mapClick);
        }

        private function dragEndHandler(evt:DragEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
            _chain.stopDispatchTimer();
            addEventListener(MouseEvent.MOUSE_UP, mapClick, false, EventPriority.EFFECT);
        }

        private function onMouseMove(evt:Event):void {
            _chain.push(new ChangeEvent(ChangeEvent.CHANGED, "move", {x: -(borderRect.transform.matrix.tx) / width, y: -(borderRect.transform.matrix.ty) / height}));
        }


        public function setup(container:DisplayObjectContainer, customWidth:Number = 0, customHeight:Number = 0):void {

        }

        public function getBoundsRelativeChild(child:DisplayObject):Rectangle {


            var rect_bounds:Rectangle = borderRect.getRect(this);

            var deltaX:Number = borderRect.x - rect_bounds.x;
            var deltaY:Number = borderRect.y - rect_bounds.y;


            var bounds:Rectangle;

            if (deltaX * deltaY == 0 && deltaX + deltaY != 0) {
                bounds = new Rectangle(deltaX, deltaY, width - rect_bounds.width + rect_bounds.height, height + rect_bounds.width - rect_bounds.height);
            } else {
                bounds = new Rectangle(deltaX, deltaY, width, height);
            }

            return bounds;
        }


        private function updateBorder():void {

            if (!_target || !_viewport)
                return;

            var h:Number = (_viewport.height > _target.height) ? _viewport.height : _target.height;
            var w:Number = (_viewport.width > _target.width) ? _viewport.width : _target.width;

            var _m:Matrix = _target.transform.matrix.clone();
            _m.tx *= -width / w;
            _m.ty *= -height / h;
            borderRect.transform.matrix = _m;

            borderRect.width = _viewport.width / _target.width * width;
            borderRect.height = _viewport.height / _target.height * height;

            (borderRect.width > width) && (borderRect.width = width);
            (borderRect.height > height) && (borderRect.height = height);

        }


        public function resize():void {
            if (!_target)
                return;

            var h:Number = _target.height;
            var w:Number = _target.width;

            var _k:Number = w / h;

            if (_k > maxWidth / maxHeight) {
                width = maxWidth;
                height = maxWidth / _k;
                thumbImage.height = height;
            }
            else {
                width = maxHeight * _k;
                height = maxHeight;
                thumbImage.width = width;
            }

            updateBorder();

        }


        public function dispose():void {
            _disposed = true;
        }


        public function set target(value:DisplayObject):void {
            _target = value;
        }

        public function set viewport(value:DisplayObject):void {
            _viewport = value;
        }

        public function get disposed():Boolean {
            return _disposed;
        }


        protected function mapClick(event:MouseEvent):void {
            var _mx:Number;
            var _my:Number;

            var _w:Number = (borderRect.width * borderRect.scaleX) / 2;
            var _h:Number = (borderRect.height * borderRect.scaleY) / 2;

            var rect_bounds:Rectangle = borderRect.getRect(this);

            var deltaX:Number = borderRect.x - rect_bounds.x;
            var deltaY:Number = borderRect.y - rect_bounds.y;


            if (_w > mouseX)
                _mx = _w;
            else if (_w > width - mouseX)
                _mx = width - _w;
            else
                _mx = mouseX;

            _mx -= _w;

            if (_h > height - mouseY)
                _my = height - _h;
            else if (_h > mouseY)
                _my = _h;
            else
                _my = mouseY;

            _my -= _h;


            borderRect.x = _mx + deltaX;
            borderRect.y = _my + deltaY;

            dispatchEvent(new ChangeEvent(ChangeEvent.CHANGED, "move", {x: -(borderRect.transform.matrix.tx) / width, y: -(borderRect.transform.matrix.ty) / height}));

        }

        protected function creationComplete(event:FlexEvent):void {
            addEventListener(MouseEvent.MOUSE_UP, mapClick, false, EventPriority.EFFECT);
        }
        ]]>
	</fx:Script>
	<s:Group id="backGroup" width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="{getStyle('backgroundColor')}" alpha="{getStyle('backgroundAlpha')}"/>
			</s:fill>
		</s:Rect>
		<s:BitmapImage source="{_pageSnapshot}" id="thumbImage" maxHeight="120" maxWidth="150" scaleMode="letterbox" horizontalCenter="0" verticalCenter="0"/>
	</s:Group>
	
	<s:Group id="borderRect" width="{this.width}" height="{this.height}" initialize="drag.target = borderRect">
		<s:Rect  width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" alpha="0"/>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('borderColor')}" weight="2"/>
			</s:stroke>
		</s:Rect>
	</s:Group>
</s:Group>
