<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark" xmlns:board="ru.teachbase.components.board.*"
         initialize="init(event)"
         implements="ru.teachbase.components.board.IWBComponent">

    <s:states>
        <s:State id="over" name="over"/>
        <s:State id="out" name="out"/>
    </s:states>


    <fx:Script>
		<![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.components.board.components.*;

        import ru.teachbase.components.board.WhiteBoardEvent;

        private var _active:Boolean;
        private var _dataProvider:Vector.<WBButton>;
        private var _propertyId:String = "";

        private var _current:uint = 0;

        private var timerID:uint;
        private var hostTimeId:uint;


        protected function init(event:FlexEvent):void {

            this.addEventListener(WhiteBoardEvent.TOOL, onToolChanged, true);
            this.addEventListener(MouseEvent.ROLL_OVER, onMouseEvent);


        }

        public function get active():Boolean {
            return _active;
        }

        public function set active(value:Boolean):void {
            _active = value;
        }


        protected function onMouseEvent(event:MouseEvent):void {


            clearInterval(timerID);
            if (event.type === MouseEvent.ROLL_OVER) {
                timerID = setTimeout(onTimeoutIn, 800);
                this.addEventListener(MouseEvent.ROLL_OUT, onMouseEvent);
            } else
                lt.useActive = true;

        }


        private function onTimeoutIn():void {
            lt.useActive = false;
        }


        public function set dataProvider(buts:Vector.<WBButton>):void {

            for each(var b:WBButton in buts) {
                b.active = false;
                addElement(b);
            }

            b.active = true;
            this.height = b.height;

            _dataProvider = buts;
        }

        public function get current():uint {
            return _current;
        }

        public function set current(value:uint):void {

            _current = value;

        }

        public function get propertyId():String {
            return _propertyId;
        }

        public function set propertyId(value:String):void {
            _propertyId = value;
        }


        protected function onToolChanged(event:WhiteBoardEvent):void {
            if (!(event.target is WBButton))
                return;

            for each(var _b:WBButton in _dataProvider)
                _b.active = false;

            (event.target as WBButton).active = true;

            setElementIndex(event.target as WBButton, 0);

            lt.useActive = true;
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <s:layout>
        <board:WBListLayout id="lt" orientation="{WBListLayout.HORIZONTAL}" gap="0" useActive="true"/>
    </s:layout>

</s:Group>
			
			
			
			
			
