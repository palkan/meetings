<?xml version="1.0" encoding="utf-8"?>
<settings:SettingsElement xmlns:fx="http://ns.adobe.com/mxml/2009"
                          xmlns:s="library://ns.adobe.com/flex/spark"
                          xmlns:settings="ru.teachbase.components.settings.*"
                          xmlns:ui="ru.teachbase.components.ui.*"
                          implements="ru.teachbase.utils.interfaces.ILocalable"
                          width="400" height="300"
                          initialize="init()"
                          addedToStage="added()"
                          creationComplete="created()">
    <fx:Script>
		<![CDATA[
        import ru.teachbase.events.GlobalEvent;
        import ru.teachbase.manage.LocaleManager;
        import ru.teachbase.manage.session.model.MeetingSettings;
        import ru.teachbase.model.App;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        public static const label:String = 'global_set';
        public static const iconOut:String = 'gearOut';
        public static const iconOver:String = 'gearOver';


        private var _created:Boolean = false;

        private function init():void {
            Localizer.addItem(this);
        }

        private function created():void {

            _created = true;

            GlobalEvent.addEventListener(GlobalEvent.MEETING_SETTINGS_UPDATE, updateHandler);
            GlobalEvent.addEventListener(GlobalEvent.PERMISSIONS_UPDATE, permissionsHandler);

            permissionsHandler();
            updateHandler();
        }


        private function added():void{
            _created && updateHandler();
        }


        private function updateHandler(e:GlobalEvent = null):void{

            notify_cb.selected = App.user.settings.showNotifications;
            make_req_cb.selected = App.meeting.settings & MeetingSettings.MAKE_REQUEST;
            private_chat_cb.selected = App.meeting.settings & MeetingSettings.PRIVATE_CHAT;

        }


        private function permissionsHandler(e:GlobalEvent = null):void{

            if(!_created) return;

            adminsBlock.visible = adminsBlock.includeInLayout = App.user.isAdmin();

        }

        private function languageHandler():void {

            const data:Object = lang_list.selectedItem;

            if (!data) return;

            LocaleManager.instance.changeLocale(data.value);

        }

        protected function makeRequestHandler():void{

            App.session.updateMeetingSettings(MeetingSettings.MAKE_REQUEST, make_req_cb.selected);

        }

        protected function privateChatHandler():void {

            App.session.updateMeetingSettings(MeetingSettings.PRIVATE_CHAT, private_chat_cb.selected);

        }

        protected function notificationsHandler():void {

            App.user.settings.showNotifications = notify_cb.selected;

        }


        public function localize():void {
            lang_lb && (lang_lb.text = translate('lang_choose', 'settings'));
            notify_lb && (notify_lb.text = translate('set_label', 'notifications'));
            notify_cb && (notify_cb.label = translate('set_receive', 'notifications'));
            users_lb && (users_lb.text = translate('set_label', 'users'));
            req_lb && (req_lb.text = translate('set_requests_off', 'users'));
            chat_lb && (chat_lb.text = translate('label', 'chat'));
        }

        override public function get label():String {
            return GeneralSettings.label;
        }

        override public function get iconOut():DisplayObject {
            return style('globalsettings', GeneralSettings.iconOut);
        }

        override public function get iconOver():DisplayObject {
            return style('globalsettings', GeneralSettings.iconOver);
        }
        ]]>
	</fx:Script>
    <s:VGroup gap="10" top="14" width="100%">
        <s:Label initialize="lang_lb.text=translate('lang_choose','settings')" id="lang_lb" color="0x6892B5"
                 fontSize="13" paddingLeft="22"/>
        <ui:RadioButtonList id="lang_list" buttonSkin="ru.teachbase.skins.RadioButtonSkin"
                            dataProvider="{LocaleManager.getLocales()}" change="languageHandler()">
            <ui:layout>
                <s:VerticalLayout paddingLeft="22"></s:VerticalLayout>
            </ui:layout>
        </ui:RadioButtonList>
        <s:Group>
            <s:BitmapImage left="2" right="2" width="{this.width-4}" fillMode="repeat"
                           source="{style('globalsettings','break')}"/>
        </s:Group>

        <s:Label id="notify_lb" initialize="notify_lb.text=translate('label','notifications')" color="0x6892B5"
                 fontSize="13" paddingLeft="22"/>
        <s:VGroup paddingLeft="22">
            <s:CheckBox id="notify_cb"
                        initialize="notify_cb.label=translate('set_receive','notifications')"
                        skinClass="ru.teachbase.skins.CheckBoxSkin" change="notificationsHandler()"/>
        </s:VGroup>
        <s:Group>
            <s:BitmapImage left="2" right="2" width="{this.width-4}" fillMode="repeat"
                           source="{style('globalsettings','break')}"/>
        </s:Group>

        <s:VGroup  id="adminsBlock" includeInLayout="false"
                 visible="false">
            <s:Label id="users_lb" initialize="users_lb.text=translate('label','users')" color="0x6892B5" fontSize="13"
                     paddingLeft="22"
                    />
            <s:HGroup paddingLeft="22">
                <s:CheckBox id="make_req_cb" label="" skinClass="ru.teachbase.skins.CheckBoxSkin"
                            change="makeRequestHandler()"/>
                <s:Label id="req_lb" initialize="req_lb.text=translate('set_requests_off','users')" color="0x515151"
                         fontSize="13" paddingLeft="10"/>
            </s:HGroup>
            <s:Group>
                <s:BitmapImage left="2" right="2" width="{this.width-4}" fillMode="repeat"
                               source="{style('globalsettings','break')}"/>
            </s:Group>

            <s:Label id="chat_lb" initialize="chat_lb.text = translate('label','chat')" color="0x6892B5" fontSize="13"
                     paddingLeft="22"/>
            <s:VGroup paddingLeft="22">
                <s:CheckBox id="private_chat_cb" initialize="private_chat_cb.label = translate('private_chat','chat');"
                            skinClass="ru.teachbase.skins.CheckBoxSkin" change="privateChatHandler()"/>
            </s:VGroup>
            <s:Group>
                <s:BitmapImage left="2" right="2" width="{this.width-4}" fillMode="repeat"
                               source="{style('globalsettings','break')}"/>
            </s:Group>
        </s:VGroup>
    </s:VGroup>
</settings:SettingsElement>
