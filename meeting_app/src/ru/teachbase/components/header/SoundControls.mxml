<?xml version="1.0"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:c="ru.teachbase.components.*"
          creationComplete="creationCompleteHandler(event)"
          implements="ru.teachbase.utils.interfaces.ILocalable">
    <fx:Declarations>
        <s:Callout id="volumeCallout"
                   width="80"
                   skinClass="ru.teachbase.skins.actionbar.AudioCalloutSkin"
                   verticalPosition="auto"
                   horizontalPosition="middle"
                   mouseDownOutside="volumeCallout.close(true);"
                   open="onVolumeOpen(event)"
                   close="onVolumeClose(event)"
                   backgroundAlpha="0">
            <s:layout>
                <s:VerticalLayout gap="0"
                                  horizontalAlign="center"
                        />
            </s:layout>
            <s:VSlider id="volumeSlider"
                       minimum="0"
                       maximum="100"
                       stepSize="1"
                       verticalCenter="0"
                       showDataTip="true"
                       change="volumeSliderChangeHandler(event)"
                       skinClass="ru.teachbase.skins.actionbar.VerticalAudioSliderSkin"
                    />
        </s:Callout>
    </fx:Declarations>

    <fx:Script><![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.events.ChangeEvent;
        import ru.teachbase.events.GlobalEvent;
        import ru.teachbase.manage.session.model.CurrentUser;
        import ru.teachbase.manage.session.model.MeetingSettings;
        import ru.teachbase.manage.session.model.MeetingState;
        import ru.teachbase.model.App;
        import ru.teachbase.utils.DelayedWriter;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private const VOLUME_HIDE_TIME:int = 2000;

        private var _volumeSaver:DelayedWriter;
        private var _volumeID:uint;

        private const user:CurrentUser = App.user;

        private var _req_available:Boolean = true;

        private function volumeSliderChangeHandler(e:Event):void {
            SoundMixer.soundTransform = new SoundTransform(volumeSlider.value / 100);

            _volumeSaver.write(volumeSlider.value);

            clearInterval(_volumeID);
            _volumeID = setTimeout(onVolumeClose,VOLUME_HIDE_TIME);
        }


        private function onVolumeOpen(evt:Event):void {
            volumeButton.selected = true;
            volumeSlider.value = App.user.settings.volumeLevel;

            _volumeID = setTimeout(onVolumeClose,VOLUME_HIDE_TIME);

        }

        private function onVolumeClose(evt:Event = null):void {
            volumeButton.selected = false;
            volumeCallout.close(true);
        }

        public function localize():void {
            volumeButton && (volumeButton.toolTip = translate("volume", 'actionbar'));
            cameraButton && (cameraButton.toolTip = translate("camera", 'actionbar'));
            microphoneButton && (microphoneButton.toolTip = translate("mic", 'actionbar'));
            cameraButtonOff && (cameraButtonOff.toolTip = translate("camera_req", 'actionbar'));
            microphoneButtonOff && (microphoneButtonOff.toolTip = translate("mic_req", 'actionbar'));
            recordButton && (recordButton.toolTip = translate("record", 'actionbar'));
        }

        private function creationCompleteHandler(e:FlexEvent):void {

            _req_available = App.meeting.settings & MeetingSettings.MAKE_REQUEST;

            _volumeSaver = new DelayedWriter(1000, function (value:Number):void {
                user.settings.volumeLevel = value;
            });

            user.addEventListener(ChangeEvent.CHANGED, handleUserChanged);

            cameraButton.visible = cameraButton.includeInLayout = user.permissions & Permissions.CAMERA;
            cameraButtonOff.visible = cameraButtonOff.includeInLayout = !cameraButton.visible;

            microphoneButton.visible = microphoneButton.includeInLayout = user.permissions & Permissions.MIC;
            microphoneButtonOff.visible = microphoneButtonOff.includeInLayout = !microphoneButton.visible;


            recordButton.visible = recordButton.includeInLayout = user.isAdmin() && (App.meeting.settings & MeetingSettings.RECORD);
            recordButton.selected = App.meeting.state == MeetingState.RECORD;



            GlobalEvent.addEventListener(GlobalEvent.MEETING_SETTINGS_UPDATE, meetingSettingsHandler);
            GlobalEvent.addEventListener(GlobalEvent.MEETING_STATE_UPDATE, meetingStateHandler);

        }

        private function handleUserChanged(e:ChangeEvent):void {

            this["handleUser_" + e.property](e.value);

        }


        private function handleUser_shareStatus(value:uint):void {

            cameraButton.selected = value & Permissions.CAMERA;
            microphoneButton.selected = value & Permissions.MIC;

        }


        private function handleUser_requestStatus(value:uint):void {

            cameraButtonOff.selected = value & Permissions.CAMERA;
            microphoneButtonOff.selected = value & Permissions.MIC;

        }


        private function handleUser_permissions(value:uint):void {


            cameraButton.visible = cameraButton.includeInLayout = value & Permissions.CAMERA;
            cameraButtonOff.visible = cameraButtonOff.includeInLayout = !cameraButton.visible && _req_available;

            microphoneButton.visible = microphoneButton.includeInLayout = value & Permissions.MIC;
            microphoneButtonOff.visible = microphoneButtonOff.includeInLayout = !microphoneButton.visible && _req_available;

            recordButton.visible = recordButton.includeInLayout = user.isAdmin() && (App.meeting.settings & MeetingSettings.RECORD);

        }


        private function meetingSettingsHandler(e:GlobalEvent):void {
            recordButton.visible = recordButton.includeInLayout = user.isAdmin() && (App.meeting.settings & MeetingSettings.RECORD);
            _req_available = App.meeting.settings & MeetingSettings.MAKE_REQUEST;

            cameraButtonOff.visible = cameraButtonOff.includeInLayout = !cameraButton.visible && _req_available;
            microphoneButtonOff.visible = microphoneButtonOff.includeInLayout = !microphoneButton.visible && _req_available;
        }

        private function meetingStateHandler(e:GlobalEvent):void {

            recordButton.selected = App.meeting.state == MeetingState.RECORD;

        }
        ]]></fx:Script>

    <c:ActionBarButton id="volumeButton"
                       initialize="with(volumeButton){
                                          icon=style('actionBar','audioIco');
                                          iconOver=style('actionBar','audioIcoOver');
                                          iconSelected=style('actionBar','audioIco');
                                          toolTip=translate('volume','actionbar');
                                          }"
                       click="volumeCallout.open(volumeButton);"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
            >
    </c:ActionBarButton>

    <c:ActionBarButton id="cameraButton"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(cameraButton){
                                        toolTip=translate('camera','actionbar');
                                        icon=style('actionBar','cameraIco');
                                        iconOver=style('actionBar','cameraIcoOver');
                                        iconSelected=style('actionBar','cameraIcoSelected');
                                        }"
                       change="App.publisher.toggleStartCamera()"
                       preventToggle="true"
            >
    </c:ActionBarButton>
    <c:ActionBarButton id="cameraButtonOff"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(cameraButtonOff){
                                        toolTip=translate('camera_req','actionbar');
                                        icon=style('actionBar','cameraIcoDisabled');
                                        iconOver=style('actionBar','cameraIcoDisabledHover');
                                        iconSelected=style('actionBar','cameraIcoDisabledHover');
                                        }"
                       change="App.session.toggleRequest(Permissions.CAMERA)"
                       preventToggle="true"
            >
    </c:ActionBarButton>

    <c:ActionBarButton id="microphoneButton"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(microphoneButton){
                                    toolTip=translate('mic','actionbar');
                                    icon=style('actionBar','micIco');
                                    iconOver=style('actionBar','micIcoOver');
                                    iconSelected=style('actionBar','micIcoSelected');}"
                       change="App.publisher.toggleStartAudio()"
                       preventToggle="true"
            >
    </c:ActionBarButton>
    <c:ActionBarButton id="microphoneButtonOff"
                       focusSkin="{null}"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       initialize="with(microphoneButtonOff){
                                    toolTip=translate('mic_req','actionbar');
                                    iconSelected=style('actionBar','micIcoDisabledHover');
                                    iconOver=style('actionBar','micIcoDisabledHover');
                                    icon=style('actionBar','micIcoDisabled');}"
                       change="App.session.toggleRequest(Permissions.MIC)"
                       preventToggle="true"
            >
    </c:ActionBarButton>

    <c:ActionBarButton id="recordButton"
                       skinClass="ru.teachbase.skins.actionbar.ActionBarToggleButtonSkin"
                       focusSkin="{null}"
                       initialize="with(recordButton){
                                    toolTip=translate('record','actionbar');
                                    icon=style('actionBar','reccordIco');
                                    iconOver=style('actionBar','reccordIcoOver');
                                    iconSelected=style('actionBar','reccordIcoSelected');}"
                       preventToggle="true"
            >
    </c:ActionBarButton>
</s:HGroup>
