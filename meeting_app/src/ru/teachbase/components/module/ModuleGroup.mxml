<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:components="ru.teachbase.components.module.*" xmlns:dragdrop="ru.teachbase.behaviours.dragdrop.*"
                      implements="ru.teachbase.manage.modules.model.IModulePanel,
                                  ru.teachbase.layout.model.ITreeLayoutElement,
		                          ru.teachbase.behaviours.interfaces.IDraggle"
                      minWidth="140" minHeight="100"
                      creationComplete="creationCompleteHandler(event)"
                      preinitialize="preinitializeHandler(event)"
                      skinClass="ru.teachbase.skins.module.ModuleSkin"
        >
    <fx:Metadata>
        [Event(name="", type="ru.teachbase.components.module.ModuleEvent")]
        [Event(name="dragPrepare", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragStart", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragCancel", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragEnd", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragDrop", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
    </fx:Metadata>
    <fx:Declarations>
        <dragdrop:DragDropBehavior id="drag"
                                   target="{this}"
                                   mouseCoordinateSpace="{this.parentApplication}"
                                   dragPrepare="dragPrepareHandler(event)"
                                   dragStart="dragStartHandler(event)"
                                   dragEnd="dragEndHandler(event)"
                                   dispatchToTarget="true"
                                   container="{container}"
                                   bounds="{dropSpace}"

                />
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.behaviours.dragdrop.DragBehavior;
        import ru.teachbase.behaviours.dragdrop.DragEvent;
        import ru.teachbase.behaviours.interfaces.IDragCoordinateSpace;
        import ru.teachbase.behaviours.interfaces.IDraggleSnapshot;
        import ru.teachbase.behaviours.interfaces.IDropContainer;
        import ru.teachbase.components.*;
        import ru.teachbase.manage.modules.model.IModuleContent;
        import ru.teachbase.manage.modules.model.ModuleInstanceData;
        import ru.teachbase.model.App;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.style;

        private var _id:uint;

        private var _title:String;
        private var _content:IModuleContent;
        private var _data:ModuleInstanceData;
        private var _locked:Boolean = false;


        private var _layoutIndex:String = '';

        [Bindable]
        public var dropSpace:IDragCoordinateSpace;

        [Bindable]
        public var container:IDropContainer;

        private var instancesToLoad:Boolean = false;

        private var __initialized:Boolean = false;

        private var _permissions:uint = 0;

        private var _expanded:Boolean = false;

        protected var snapshot_catch:IDraggleSnapshot;

        //------------ init handlers ----------------//

        private function creationCompleteHandler(e:FlexEvent):void {
            width = Math.max(minWidth, width);
            height = Math.max(minHeight, height);

            __initialized = true;

            if (instancesToLoad) {
                mainContent.addElement(_content);
                instancesToLoad = false;
            }

            title = _title;
        }

        private function preinitializeHandler(e:FlexEvent):void {
            this.setStyle("backgroundColor", style('modulecontainer', 'background', 'string'));

            // check if we have initialized instance for this panel

            if (data) content = App.meeting.modules[data.moduleId].getVisual(data.instanceId);
        }


        //------------ implementations ---------------//


        //------------ IModulePanel


        public function get elementId():uint {
            return _id;
        }

        public function set elementId(value:uint):void {
            _id = value;
        }

        public function set content(value:IModuleContent):void {

            if (!value) {
                hide();
                mainContent.removeAllElements();
                return;
            }

            _title = value.label;
            _content = value;

            _content.permissions = _permissions;
            _content.ownerPanel = this;

            if (this._initialized)
                mainContent.addElement(_content);
            else
                instancesToLoad = true;
        }


        public function get locked():Boolean {
            return _locked;
        }

        public function set locked(value:Boolean):void {
            _locked = value;
            drag.active = !_locked;
            titleBar && (titleBar.locked = value);
        }


        public function get title():String {
            return _title;
        }

        public function set title(value:String):void {
            _title = value;
            titleBar.title = value;
        }

        public function get content():IModuleContent {
            return _content;
        }


        //------------- ITreeLayoutElement


        public function get layoutIndex():String {
            return _layoutIndex;
        }

        public function set layoutIndex(value:String):void {
            _layoutIndex = value;
        }

        public function get _initialized():Boolean {
            return __initialized;
        }


        //------------- IDraggle

        public function getSnapshot():IDraggleSnapshot {

            snapshot_catch = snapshot_catch || new DraggleSnapshot(this);

            return snapshot_catch;
        }

        public function get dragBehavior():DragBehavior {
            return drag;
        }

        public function get dragState():String {
            return currentState;
        }


        //--------------- API ------------------//


        public function hide():void {
            _content.hide();
        }


        //---------------- handlers --------------//

        private function dragPrepareHandler(e:DragEvent):void {
        }

        private function dragStartHandler(e:DragEvent):void {
        }

        private function dragEndHandler(e:DragEvent):void {
        }


        //----------------- get/set ---------------//

        public function set permissions(value:uint):void {

            _permissions = value;

            titleBar && (titleBar.p_enabled = App.user.isAdmin());

            _content && (_content.permissions = value);

        }

        public function get data():ModuleInstanceData {
            return _data;
        }

        public function set data(value:ModuleInstanceData):void {
            _data = value;
        }
        ]]>
	</fx:Script>
    <s:layout>
        <s:VerticalLayout gap="0"/>
    </s:layout>
    <components:ModuleHeader id="titleBar" width="100%" height="28" initialize="titleBar.target = this; titleBar.locked = _locked;"/>
    <s:Group id="mainContent" width="100%" height="100%" top="28" bottom="0"/>
</s:SkinnableContainer>
