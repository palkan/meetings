<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:layout="ru.teachbase.layout.*"
         xmlns:flash="*" xmlns:module="ru.teachbase.components.module.*"
         width="100%" height="100%" creationComplete="creationCompleteHandler(event)"
         implements="ru.teachbase.behaviours.interfaces.IDropContainer,
					ru.teachbase.behaviours.interfaces.IDropCoordinateSpace,
		 			ru.teachbase.manage.modules.model.IModuleContainer"
         preinitialize="preinitializeHandler(event)">
    <fx:Declarations>
    </fx:Declarations>

    <!-- ui ctrl -->
    <fx:Script>
        <![CDATA[
        import mx.core.IVisualElement;
        import mx.events.FlexEvent;

        import ru.teachbase.behaviours.dragdrop.DragCoordinateSpace;
        import ru.teachbase.behaviours.dragdrop.DragDirection;
        import ru.teachbase.behaviours.interfaces.IDragCoordinateSpace;
        import ru.teachbase.behaviours.interfaces.IDraggle;
        import ru.teachbase.behaviours.interfaces.IDraggleSnapshot;
        import ru.teachbase.behaviours.interfaces.IDropCoordinateSpace;
        import ru.teachbase.components.*;
        import ru.teachbase.events.PermissionEvent;
        import ru.teachbase.layout.LayoutController;
        import ru.teachbase.layout.model.ILayoutResizer;
        import ru.teachbase.layout.model.ITreeLayoutElement;
        import ru.teachbase.manage.layout.LayoutManager;
        import ru.teachbase.manage.modules.model.IModulePanel;
        import ru.teachbase.model.App;
        import ru.teachbase.skins.cursors.HorizontalResizerCursor;
        import ru.teachbase.skins.cursors.VerticalResizerCursor;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.style;

        private const NAME:String = "modules";

        private var _controller:LayoutController;
        private var _manager:LayoutManager;

        public const dropSpace:IDragCoordinateSpace = new DragCoordinateSpace();
        private const _panels:Vector.<IModulePanel> = new Vector.<IModulePanel>();
        private const _wait_panels:Vector.<IModulePanel> = new Vector.<IModulePanel>();


        private var _hoveredElement:ITreeLayoutElement;

        private var _getDropBoundsSide_catch:uint = DragDirection.NO_DIRECTION;
        private var _hoveredBounds_catch:Rectangle;
        private var _dropBounds_catch:Rectangle;

        private var _dropDirection:uint;
        private var _dropDirectionChanged:Boolean = true;

        private var _snapshot:DraggleSnapshot = null;

        private var _dragging:Boolean = false;

        //-------------- init handlers --------------//

        protected function preinitializeHandler(event:FlexEvent):void {

            // setup manager

            _manager = App.layout;
            _manager && _manager.setContainers(this, elementContainer);

            //setup resizer icons

            VerticalResizerCursor.icon = style("cursor", "resizev");
            HorizontalResizerCursor.icon = style("cursor", "resizeh");
        }

        private function creationCompleteHandler(e:FlexEvent):void {

            // setup layout controller

            _controller = _manager.controller as LayoutController;

            _controller.init(elementContainer);
            _controller.useResizers(attachResizer);

            lt.controller = _controller;


            // add listeners for module events

            addEventListener(ModuleEvent.MINMAX, onMinMaxHandler, true);
            addEventListener(ModuleEvent.REMOVE, onRemoveHandler, true);
            addEventListener(ModuleEvent.SETTINGS, onSettingsHandler, true);
            addEventListener(ModuleEvent.RESIZE, onResizerHandler, true);

            // setup default panels

            for each(var panelId:uint in App.layout.panel_ids) {
                createPanel(panelId);
            }

            App.session.userReady();
        }


        public function attachResizer():ILayoutResizer {

            var resizer:ModuleResizer = new ModuleResizer();
            resizer.container = resizersContainer;
            resizer.visible = false;
            resizersContainer.addElement(resizer);

            return resizer;
        }


        //------------ implementation ---------------//

        //--------- IModuleContainer

        public function lock():void {

            //TODO: check if dragging!

            for each(var el:IModulePanel in _panels)
                el.locked = true;

            resizersContainer.visible = false;

            _controller.locked = true;
        }

        public function unlock():void {

            for each(var el:IModulePanel in _panels)
                el.locked = false;

            resizersContainer.visible = true;

            _controller.locked = false;

            _controller.updateDisplayList();
        }


        public function createPanel(id:uint = 0):IModulePanel {
            var panel:ModuleGroup = new ModuleGroup();

            panel.elementId = id ? id : _controller.maxId + 1;
            panel.container = this;
            panel.dropSpace = dropSpace;

            panel.visible = false;

            panel.locked = _controller.locked;

            panel.p_enabled = App.user.isAdmin();

            _controller.active = false;

            panel.addEventListener(FlexEvent.CREATION_COMPLETE, panelCreated);
            _wait_panels.push(panel);

            elementContainer.addElement(panel);
            return panel;
        }


        public function destroyPanel(panel:IModulePanel):void{
            if(!panel) return;

            panel.content = null;

            elementContainer.removeElement(panel);
        }


        //---------- IDropContainer


        public function hasDropUnderPoint(point:Point):Boolean {
            return Boolean(_hoveredElement);
        }

        public function getDropUnderPoint(point:Point):IDropCoordinateSpace {
            return this;
        }

        public function addSnapshot(__snapshot:IDraggleSnapshot, position:Point):void {
            if (!__snapshot)
                return;

            var snapshot:DraggleSnapshot = __snapshot as DraggleSnapshot;

            stage.addChild(snapshot);
            snapshot.x = position.x;
            snapshot.y = position.y;

            _snapshot = snapshot;
            _dragging = true;

            // if source is Panel
            if (snapshot.source is IModulePanel) {
                _controller.removeElement(snapshot.source as ITreeLayoutElement, true, false);
            } else if (snapshot.source is ActionBarButtonDraggle) {
                //THINK: ???
            }
        }

        public function removeSnapshot(__snapshot:IDraggleSnapshot):void {
            _snapshot = null;
            _dragging = false;
            var snapshot:DraggleSnapshot = __snapshot as DraggleSnapshot;
            snapshot.parent && snapshot.parent.removeChild(snapshot);
        }

        //----- IDropCoordinateSpace

        public function isPossibleDropFor(object:IDraggle):Boolean {
            _hoveredElement || calculatePossibleDrop();

            return _hoveredElement && _hoveredElement !== object;
        }

        public function prepareDrop(object:IDraggleSnapshot, mouse:Point):void {
            decoreLayer.visible = true;

            calculatePossibleDrop();
        }

        public function drop(__snapshot:IDraggleSnapshot, mouse:Point):void {

            var snapshot:DraggleSnapshot = __snapshot as DraggleSnapshot;
            decoreLayer.visible = false;

            if (!(_hoveredElement || _controller.model.num === 0) || !_snapshot)
                return;

            // if source is Panel (then we are moving)
            if (snapshot.source is IModulePanel) {
                if (_getDropBoundsSide_catch !== DragDirection.NO_DIRECTION)
                    _controller.addElement(snapshot.source as ITreeLayoutElement, _hoveredElement as ITreeLayoutElement, _dropDirection, true);
            }
            else if (snapshot.source is ActionBarButtonDraggle) {

                const button:ActionBarButtonDraggle = snapshot.source as ActionBarButtonDraggle;


                //TODO: dry the following block (see LayoutController.as:277)

                var dir:uint = 0;
                var index:uint = 0;


                switch (DragDirection.getNameByValue(_dropDirection)) {

                    case "up":
                        dir = 1;
                        break;
                    case "down":
                        dir = 1;
                        index = 1;
                        break;
                    case "right":
                        index = 1;
                        break;
                    default:
                        break;

                }

                App.layout.commitAddElement(
                        _hoveredElement.elementId,
                        index,
                        dir
                );


                //THINK: storing module id in ModulesManager is not safe and kinda stupid. Maybe we need some redesign here, disjoin completely panels and modules.

                App.modules.setModuleId(button.module.moduleId);

            }

        }

        public function cancelDrop(__snapshot:IDraggleSnapshot):void {
            var snapshot:DraggleSnapshot = __snapshot as DraggleSnapshot;
            decoreLayer.visible = false;

            if (snapshot.source is IModulePanel) {
                snapshot.source.visible = true;
            }


        }

        //------------ event handlers ---------------//


        protected function panelCreated(e:FlexEvent):void {

            e.currentTarget.removeEventListener(e.type, panelCreated);

            if (_wait_panels.indexOf(e.currentTarget) > -1) {
                _panels.push(e.currentTarget);
                _controller.initElement(e.currentTarget as ITreeLayoutElement);
                _wait_panels.splice(_wait_panels.indexOf(e.currentTarget), 1);
            }

            if (!_wait_panels.length) _controller.active = true, _panels.forEach(__show), _controller.updateDisplayList();

        }

        private function __show(item:IModulePanel, index:Number, collection:*):void {
            item.visible = true;
        }


        protected function onMinMaxHandler(event:ModuleEvent):void {
            if (event.value) {

                const panel:ModuleGroup =  event.target as ModuleGroup;

                panel.dragBehavior.active = false;

                elementContainer.setElementIndex(event.target as IVisualElement, elementContainer.numElements-1);

                _controller.expand(panel);

            } else
                _controller.minimize(event.target as ITreeLayoutElement);
        }

        protected function onRemoveHandler(event:ModuleEvent):void {
            var panelToRemove:ITreeLayoutElement = event.target as ITreeLayoutElement;

            App.layout.commitRemoveElement(panelToRemove.elementId);
        }

        protected function onResizerHandler(event:ModuleEvent):void {
            if ((event.target as ModuleResizer) && event.value) {
                _controller.resizeGroup((event.target as ModuleResizer).key, event.value);
            }
        }

        protected function onSettingsHandler(event:ModuleEvent):void {
            /* var _remset:ModuleSettings = new ModuleSettings("minimize", ModuleSettings.FUN, removeModule, event.target);

             var _s:Vector.<ModuleSettings> = (event.target as ModuleGroup).currentContent.settings;

             if (!_s)
             _s = new Vector.<ModuleSettings>();
             else
             _s = _s.concat();

             _s.push(_remset);

             setsCallout.dataProvider = _s;
             setsCallout.open((event.target as ModuleGroup).settins);
             */
        }

        protected function onPermissionsChanged(event:PermissionEvent):void {

            if (!Permissions.isAdmin(event.value)) lock();
            else unlock();

        }


        //----------------- internal ------------------//

        private function calculatePossibleDrop():void {
            const mouseGlobal:Point = new Point(elementContainer.mouseX, elementContainer.mouseY);

            if (mouseGlobal.x < 0 || mouseGlobal.y < 0) {
                _hoveredElement = null;
                decoreLayer.visible = false;
                return;
            }

            var drop_obj:Object = _controller.getElementUnderPoint(mouseGlobal);

            if (!drop_obj || !drop_obj.element) {
                decoreLayer.visible = false;
                return;
            }

            const element:ITreeLayoutElement = drop_obj.element as ITreeLayoutElement;


            if (element is ITreeLayoutElement) {
                if (element !== _hoveredElement || (_hoveredBounds_catch && !isEqualSize(_hoveredBounds_catch, element)))
                    _dropBounds_catch = _hoveredBounds_catch = null;

                _dropDirectionChanged = !(_dropDirection === drop_obj.direction);

                _dropDirection = drop_obj.direction;

                _hoveredElement = element as ITreeLayoutElement;
                drawHoveredElementBounds();
            }
        }

        private function drawHoveredElementBounds():void {

            if (!_hoveredElement)
                return;

            const mouseLocal:Point = new Point((_hoveredElement as DisplayObject).mouseX, (_hoveredElement as DisplayObject).mouseY);

            if (_dropBounds_catch && !_dropDirectionChanged)
                return;

            const dropZone:Rectangle = _dropBounds_catch = getDropBounds();

            if (dropZone) {
                decoreLayer.x = _hoveredElement.x + dropZone.x;
                decoreLayer.y = _hoveredElement.y + dropZone.y;
                decoreLayer.width = dropZone.width;
                decoreLayer.height = dropZone.height;

            }
        }


        private function isEqualSize(a:Object, b:Object):Boolean {
            return a.width === b.width && a.height === b.height;
        }


        public function getDropBounds():Rectangle {

            const full:Rectangle = new Rectangle(0, 0, _hoveredElement.width, _hoveredElement.height);

            const cell:Rectangle = full.clone();

            var kh:Number = 1;
            var kw:Number = 1;

            if (_hoveredElement == elementContainer) {
                //full.y-=this.y;
                kh = 0.7;
                kw = 0.5;
            }

            cell.y = full.y;

            switch (_dropDirection) {
                case DragDirection.UP:
                    cell.height = kh * full.height / 2;
                    break;
                case DragDirection.RIGHT:
                    cell.x = full.x + full.width * (1 - kw / 2);
                    cell.width = kw * full.width / 2;
                    break;
                case DragDirection.LEFT:
                    cell.width = kw * full.width / 2;
                    break;
                case DragDirection.DOWN:
                    cell.y += full.height * (1 - kh / 2);
                    cell.height = kh * full.height / 2;
                    break;
            }


            _getDropBoundsSide_catch = _dropDirection;

            return cell;
        }


        public function getDropBoundsSide(rect:Rectangle):uint {
            if (!rect)
                return DragDirection.NO_DIRECTION;

            // it calcs in getDropBoundsForPoint method
            return _getDropBoundsSide_catch;
        }

        public function getDropIndexBySide(side:uint):int {
            switch (side) {
                case DragDirection.LEFT:
                case DragDirection.UP:
                {
                    return 0;
                }

                case DragDirection.RIGHT:
                case DragDirection.DOWN:
                default:
                {
                    return 1;
                }
            }
        }

        public function getDropAlignBySide(side:uint):int {
            switch (side) {
                case DragDirection.LEFT:
                case DragDirection.RIGHT:
                {
                    return 0;
                }

                default:
                case DragDirection.UP:
                case DragDirection.DOWN:
                {
                    return 1;
                }
            }
        }

        private function bringToFront(obj:DisplayObject):void {
            obj && obj.parent && obj.parent[(("setElementIndex" in obj.parent) ? "setElementIndex" : "setChildIndex")](obj, obj.parent.numChildren - 1);
        }


        public function cancelDragDrop():void {
            if (!_snapshot)
                return;
            _snapshot.source.visible = true;
            decoreLayer.visible = false;
            removeSnapshot(_snapshot);
        }
        ]]>
	</fx:Script>

    <!--main content layer-->
    <module:ElementsContainer id="elementContainer"
                              width="100%" height="100%"
            >
        <module:layout>
            <layout:TreeLayout id="lt"/>
        </module:layout>
    </module:ElementsContainer>

    <!--resizers-->

    <s:Group id="resizersContainer"
             width="100%"
             height="100%"
            >

    </s:Group>

    <!--top layer-->
    <flash:DropLayer id="decoreLayer" visible="false" mouseEnabled="false" mouseChildren="false" alpha="0.8"/>

</s:Group>
