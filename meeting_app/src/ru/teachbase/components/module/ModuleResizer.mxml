<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:dragdrop="ru.teachbase.behaviours.dragdrop.*"
         implements="ru.teachbase.behaviours.interfaces.IDraggle, ru.teachbase.layout.model.ILayoutResizer"
         currentState="{drag.state}"
         creationComplete="creationCompleteHandler(event)"
         mouseEnabledWhereTransparent="true"
         useHandCursor="false"
         rollOver="{CursorManager.setCursor(cursorClazz,CursorManagerPriority.HIGH)}"
         rollOut="{if(currentState == normal.name)  CursorManager.removeAllCursors()}"
        >
    <fx:Metadata>
        [Event(name="module_resize", type="ru.teachbase.components.module.ModuleEvent")]
        [Event(name="dragPrepare", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragStart", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragCancel", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
        [Event(name="dragEnd", type="ru.teachbase.behaviours.dragdrop.DragEvent")]
    </fx:Metadata>
    <fx:Declarations>
        <dragdrop:DragBehavior id="drag"
                               target="{this}"
                               mouseCoordinateSpace="{this.parentApplication}"
                               dragPrepare="dragPrepareHandler(event)"
                               dragStart="dragStartHandler(event)"
                               dragEnd="dragEndHandler(event)"
                               dispatchToTarget="false"
                               useCapture="false"
                               active="false"
                />
    </fx:Declarations>

    <s:states>
        <s:State id="normal" name="static"/>
        <s:State id="dragging" name="dragging" stateGroups="drag"/>
        <s:State id="dragPreparing" name="preparing" stateGroups="drag"/>
    </s:states>

    <fx:Script>
		<![CDATA[
        import mx.core.IVisualElementContainer;
        import mx.events.FlexEvent;
        import mx.managers.CursorManager;
        import mx.managers.CursorManagerPriority;

        import ru.teachbase.behaviours.dragdrop.DragBehavior;
        import ru.teachbase.behaviours.dragdrop.DragEvent;
        import ru.teachbase.behaviours.interfaces.IDraggleSnapshot;
        import ru.teachbase.layout.model.ResizerModel;
        import ru.teachbase.skins.cursors.HorizontalResizerCursor;
        import ru.teachbase.skins.cursors.VerticalResizerCursor;

        private var cursorClazz:Class;
        public var container:IVisualElementContainer;

        private var _start:int;
        private var _delta:int;

        private var _model:ResizerModel;

        private function creationCompleteHandler(e:FlexEvent):void {

            setActualSize(Math.max(minWidth, width), Math.max(minHeight, height));
            if (_model) model = _model;
        }


        private function dragPrepareHandler(e:DragEvent):void {
            currentState = dragPreparing.name;
        }

        private function dragStartHandler(e:DragEvent):void {
            _start = (_model.direction === 0) ? stage.mouseX : stage.mouseY;
            currentState = dragging.name;
        }

        private function dragEndHandler(e:DragEvent):void {
            completeDrag(stage.mouseX, stage.mouseY);
            dispatchEvent(new ModuleEvent(ModuleEvent.RESIZE, _delta));
            currentState = normal.name;
            CursorManager.removeAllCursors();
        }


        private function completeDrag(x:int, y:int):void {

            var _d:int = (_model.direction === 0) ? x - _start : y - _start;

            _delta = int(_d * 100 / _model.groupParam);

        }


        public function getSnapshot():IDraggleSnapshot {

            return this as IDraggleSnapshot;
        }


        public function get dragBehavior():DragBehavior {
            return drag as DragBehavior;
        }

        public function get dragState():String {
            return currentState;
        }


        public function setDirection(value:uint):void {

            if (value === 0) {
                cursorClazz = HorizontalResizerCursor;
                setLayoutBoundsSize(_model.gap, _model.param);
            } else {
                cursorClazz = VerticalResizerCursor;
                setLayoutBoundsSize(_model.param, _model.gap);
            }

        }


        public function setParam(value:int):void {
            if (_model.direction === 0)
                setLayoutBoundsSize(_model.gap, value);
            else
                setLayoutBoundsSize(value, _model.gap);
        }


        public function hide():void {
            this.visible = false;
            this.drag.active = false;
        }


        public function show():void {
            this.visible = true;
            this.drag.active = true;
        }


        public function set model(value:ResizerModel):void {

            _model = value;

            setDirection(_model.direction);

            drag.virtualBounds = _model.dragBounds;
            drag.direction = _model.direction;

            setLayoutBoundsPosition(_model.position.x, _model.position.y);

        }

        public function get key():String {
            return _model ? _model.key : '';
        }
        ]]>
	</fx:Script>
    <s:Rect width="100%" height="100%" x="0" y="0">
        <s:fill>
            <s:SolidColor color="0x0024FA" alpha.static="0.4" alpha.preparing="1" alpha.dragging="0.3"/>
        </s:fill>
    </s:Rect>
</s:Group>

