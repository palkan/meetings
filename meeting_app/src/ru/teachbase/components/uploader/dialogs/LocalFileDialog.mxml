<?xml version="1.0"?>
<uploader:UploadDialog xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:uploader="ru.teachbase.components.uploader.*"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:tbcomp="ru.teachbase.components.*"
                       xmlns:tbui="ru.teachbase.components.ui.*"
                       xmlns:tbrender="ru.teachbase.module.documents.renderers.*"
                       implements="ru.teachbase.utils.interfaces.ILocalable"
                       width="100%" height="100%"
                       initialize="init()"
                       currentState="idle">
    <fx:Script><![CDATA[
        import ru.teachbase.events.FileStatusEvent;
        import ru.teachbase.model.App;
        import ru.teachbase.module.documents.model.DocumentData;
        import ru.teachbase.module.documents.model.FileItem;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.shortcuts.translate;

        private const _label:String = "menu_from_pc";

        private var _uploading:Boolean = false;

        private function init():void {

            Localizer.addItem(this);

        }


        override public function dispose():void {
            _item = null;
        }


        public function localize():void {
            upload_btn && (upload_btn.label = translate("upload_files", "file_upload"));
        }

        private function startUpload():void {

            errorText.text = '';

            addListeners();
            App.file.upload();

        }


        override public function submit():void {
            super.submit();
            file_preview.data = null;
            currentState = idle.name;
        }


        override public function cancel():void {

            super.cancel();

            if (currentState == progress.name) {
                _uploading && App.file.abort();
                removeListeners();
            } else {
                _item = null;
                file_preview && (file_preview.data = null);
            }

            _uploading = false;

            currentState = idle.name;

        }


        private function fileErrorHandler(e:ErrorEvent):void {

            currentState = idle.name;

            errorText.text = e.text;

            _uploading = false;
        }

        private function fileSelectedHandler(e:FileStatusEvent):void {

            currentState = progress.name;

            progressText.text = translate("upload_progress", "file_upload", 0);

            _uploading = true;
        }

        private function fileProgressHandler(e:FileStatusEvent):void {

            if (currentState != progress.name) return;

            progressBar.progress = e.value / 100;

            progressText.text = translate("upload_progress", "file_upload", e.value);
        }

        private function fileCompleteHandler(e:FileStatusEvent):void {

            _item = new DocumentData({file:FileItem.build(e.value)});

            removeListeners();

            _uploading = false;

            currentState = complete.name;

            completeText.text = translate("upload_complete", "file_upload", _item.name);

            file_preview.data = _item;

            selected = true;

        }


        private function fileProcessingHandler(e:FileStatusEvent):void {

            progressText.text = translate("upload_processing", "file_upload");
            progressBar.progress = 100;

        }


        private function addListeners():void {
            App.file.addEventListener(ErrorEvent.ERROR, fileErrorHandler);
            App.file.addEventListener(FileStatusEvent.PROGRESS, fileProgressHandler);
            App.file.addEventListener(FileStatusEvent.COMPLETE, fileCompleteHandler);
            App.file.addEventListener(FileStatusEvent.SELECTED, fileSelectedHandler);
            App.file.addEventListener(FileStatusEvent.PROCESSING, fileProcessingHandler);
            App.file.addEventListener(FileStatusEvent.PROCESSING_COMPLETE, fileCompleteHandler);
        }

        private function removeListeners():void {
            App.file.removeEventListener(ErrorEvent.ERROR, fileErrorHandler);
            App.file.removeEventListener(FileStatusEvent.PROGRESS, fileProgressHandler);
            App.file.removeEventListener(FileStatusEvent.COMPLETE, fileCompleteHandler);
            App.file.removeEventListener(FileStatusEvent.SELECTED, fileSelectedHandler);
            App.file.removeEventListener(FileStatusEvent.PROCESSING, fileProcessingHandler);
            App.file.removeEventListener(FileStatusEvent.PROCESSING_COMPLETE, fileCompleteHandler);
        }

        override public function get label():String {
            return _label;
        }
        ]]></fx:Script>
    <uploader:states>
        <s:State id="idle" name="idle"/>
        <s:State id="progress" name="progress"/>
        <s:State id="complete" name="complete"/>
    </uploader:states>
    <s:Group id="main" width="100%" height="100%">

        <s:RichText id="errorText" horizontalCenter="0" color="#990000" fontSize="11" includeIn="idle"/>

        <tbcomp:RedButton id="upload_btn" verticalCenter="0" fontSize="13" includeIn="idle" fontWeight="bold" horizontalCenter="0" width="140" click="startUpload()"
                initialize="upload_btn.label = translate('upload_files','file_upload');"
                />

        <s:Group id="progressGroup" width="100%" height="200" verticalCenter="0" includeIn="progress">
            <s:RichText width="100%" left="40" right="40" id="progressText" horizontalCenter="0" fontSize="11" color="0x515151" height="60"/>
            <tbui:ProgressBar width="200" height="20" id="progressBar" horizontalCenter="0"/>
        </s:Group>

        <s:Group id="completeGroup" width="100%" height="100%" verticalCenter="0" includeIn="complete">
            <s:RichText width="100%" left="40" right="40" top="40" id="completeText" horizontalCenter="0" fontSize="11" color="0x515151" height="60"/>
            <tbrender:FileItemRenderer horizontalCenter="0" verticalCenter="0" id="file_preview"/>
        </s:Group>
    </s:Group>
</uploader:UploadDialog>
