<?xml version="1.0" encoding="utf-8"?>
<module:ModuleInstance xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:components="ru.teachbase.components.*" xmlns:module="ru.teachbase.components.module.*"
                       xmlns:chat="ru.teachbase.module.chat.components.*" xmlns:ui="ru.teachbase.components.ui.*"
                       implements="ru.teachbase.utils.interfaces.ILocalable"
                       creationComplete="creationCompleteHandler()"
        >
    <fx:Script>
		<![CDATA[
        import caurina.transitions.Tweener;

        import flash.desktop.Clipboard;
        import flash.desktop.ClipboardFormats;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.rpc.Responder;

        import ru.teachbase.components.notifications.Notification;

        import ru.teachbase.constants.PacketType;
        import ru.teachbase.events.GlobalEvent;
        import ru.teachbase.components.callouts.SettingsItem;
        import ru.teachbase.manage.rtmp.RTMPListener;
        import ru.teachbase.manage.rtmp.events.RTMPEvent;
        import ru.teachbase.manage.rtmp.model.Recipients;
        import ru.teachbase.manage.session.model.MeetingSettings;
        import ru.teachbase.model.App;
        import ru.teachbase.model.User;
        import ru.teachbase.module.chat.components.ChatElementEvent;
        import ru.teachbase.module.chat.model.ChatMessage;
        import ru.teachbase.module.chat.model.ChatRoom;
        import ru.teachbase.utils.LocalFile;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.Strings;
        import ru.teachbase.utils.shortcuts.$null;
        import ru.teachbase.utils.shortcuts.notify;
        import ru.teachbase.utils.shortcuts.rtmp_call;
        import ru.teachbase.utils.shortcuts.rtmp_history;
        import ru.teachbase.utils.shortcuts.rtmp_send;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private const TYPING_WAIT_TIME:int = 2000;
        private const MESSAGE_MAX_SIZE:int = 256;

        private const USER_DEFAULT_COLOR:String = "0x3E83B9";
        private const ADMIN_DEFAULT_COLOR:String = "0xFF0359";

        private const listener:RTMPListener = new RTMPListener(PacketType.CHAT);
        private const user:User = App.user;

        private var _settings:Vector.<SettingsItem> = new Vector.<SettingsItem>();


        private var _rooms:ArrayCollection;
        private var _roomsById:Object = {};
        private var _roomsByUserId:Object = {};
        private var _currentRoom:ChatRoom;

        private var _adminsRoom:ChatRoom;

        private var _myColor:String = USER_DEFAULT_COLOR;

        [Bindable]
        private var _unreadCount:int = 0;

        private var _isTyping:Boolean = false;

        private var _typingID:uint;

        [Bindable]
        private var _privateChatEnabled:Boolean = false;

        private var _initialized:Boolean = false;

        private var _lastMessageId:int = 0;

        //------------- initialization / creation------------------//

        private function creationCompleteHandler():void {
            currentState = chatState.name;

            new ChatMessage(null, null);

            label = translate('public_label', 'chat');

            Localizer.addItem(this);
            GlobalEvent.addEventListener(GlobalEvent.START_PRIVATE_CHAT, globalEventHandler);

            _rooms = new ArrayCollection();
            _rooms.filterFunction = filterUsersByName;

            // add system rooms

            var publicRoom:ChatRoom = new ChatRoom(Recipients.ALL, translate('public_label', 'chat'), true);
            _roomsById[Recipients.ALL] = publicRoom;
            _rooms.addItem(publicRoom);

            _adminsRoom = new ChatRoom(Recipients.ADMINS, translate('admin_label', 'chat'), true);

            if (App.user.isAdmin()) {
                _roomsById[Recipients.ADMINS] = _adminsRoom;
                _rooms.addItem(_adminsRoom);

                _myColor = ADMIN_DEFAULT_COLOR;
            }

            _currentRoom = publicRoom;
            _currentRoom.visible = true;
            messagesList.textFlow = _currentRoom.textFlow;

            _settings.push(new SettingsItem("copy_chat", SettingsItem.FUN, getRawText));
            _settings.push(new SettingsItem("save_chat", SettingsItem.FUN, saveAsCSV));
            _settings.push(new SettingsItem("clear_chat", SettingsItem.FUN, clearChatHandler));

            listener.addEventListener(RTMPEvent.DATA, handleMessage);
            listener.initialize();

            _privateChatEnabled = App.meeting.settings & MeetingSettings.PRIVATE_CHAT;
            GlobalEvent.addEventListener(GlobalEvent.MEETING_SETTINGS_UPDATE, settingsUpdate);
            GlobalEvent.addEventListener(GlobalEvent.USER_LEAVE, userLeaveHandler);
            GlobalEvent.addEventListener(GlobalEvent.RECONNECT, handleReconnect);

            rtmp_history(PacketType.CHAT, new mx.rpc.Responder(historyHandler, $null), 0, App.user.isAdmin() ? [Recipients.ALL, Recipients.ADMINS] : [Recipients.ALL]);
        }


        //--------------- handlers --------------------//


        private function handleReconnect(e:GlobalEvent):void {

            listener.dispose();
            listener.initialize();


            /// deactivate chats with users left

            for (var uid:String in _roomsByUserId) {

                if (!App.meeting.usersByID[uid] && (_roomsByUserId[uid] as ChatRoom).active) deactivateRoom(_roomsByUserId[uid] as ChatRoom);

            }

            const room_ids:Array = _rooms.source.map(function (r:ChatRoom, ind:int, arr:Array):Number {
                return r.roomId;
            });

            rtmp_history(PacketType.CHAT, new mx.rpc.Responder(historyHandler, $null), _lastMessageId, room_ids);

        }

        private function settingsUpdate(e:GlobalEvent):void {


            _privateChatEnabled = App.meeting.settings & MeetingSettings.PRIVATE_CHAT;

            if (_privateChatEnabled) return;

            if (_currentRoom.roomId != Recipients.ALL) {
                inputField.text = '';
                switchChatRoom(Recipients.ALL);
            }

        }


        private function userLeaveHandler(e:GlobalEvent):void {

            const uid:Number = (e.value as User).sid;

            if (_roomsByUserId[uid]) {
                const room:ChatRoom = _roomsByUserId[uid] as ChatRoom;
                deactivateRoom(room);
            }
        }

        private function typingStopped():void {
            _isTyping = false;
            _typingID = null;
        }


        private function typeStarted(evt:TextEvent):void {
            if (evt.text.charCodeAt(0) == 13 || !_currentRoom) {
                return;
            }

            if (_isTyping) return;

            _isTyping = true;

            _typingID && clearTimeout(_typingID);
            _typingID = setTimeout(typingStopped, TYPING_WAIT_TIME);

            var m:ChatMessage = new ChatMessage(user.sid, _currentRoom.roomId, ChatMessage.TYPING);

            rtmp_send(PacketType.CHAT, m, _currentRoom.roomId);
        }

        private function inputFieldEnterHandler(e:Event):void {

            if (inputField.text == "") {
                return;
            }

            sendMessage(Strings.truncate(inputField.text, MESSAGE_MAX_SIZE));

            inputField.text = '';
        }


        protected function handleMessage(e:RTMPEvent):void {
            var m:ChatMessage = e.packet.data as ChatMessage;

            if (!m) return;

            switch (m.type) {
                case ChatMessage.MESSAGE:
                    addMessage(m);
                    if (m.roomId != _currentRoom.roomId) notify(new Notification(translate('new_message', 'notifications', m.name, m.body)));
                    break;
                case ChatMessage.TYPING:
                    (m.roomId == _currentRoom.roomId) && (m.uid != user.sid) && typingGroup.add(App.meeting.usersByID[m.uid]);
                    break;
                case ChatMessage.CLEAR:
                    clearChat(m.roomId);
                    break;
            }

        }


        private function historyHandler(arr:Array):void {

            for each(var mes:ChatMessage in arr) {
                addMessage(mes);
            }

            listener.readyToReceive = true;

            _initialized = true;

        }

        private function scrollToSelectedIndexHandler(event:FlexEvent = null):void {

            messagesList.removeEventListener(FlexEvent.UPDATE_COMPLETE, scrollToSelectedIndexHandler);

            if (!_currentRoom) return;

            Tweener.addTween(messagesScroller.viewport, {verticalScrollPosition: messagesScroller.viewport.contentHeight, time: 0.5, transition: "easeOutSine"});
        }


        public function clearChatHandler():void {
            if (!_currentRoom) return;
            rtmp_send(PacketType.CHAT, new ChatMessage(user.sid, _currentRoom.roomId, ChatMessage.CLEAR), _currentRoom.roomId);
        }

        private function roomsListClick(event:MouseEvent):void {
            _currentRoom.visible = false;
            currentState = roomsState.name;
            label = translate('users', 'users');
            _rooms.source.sort(compareChatRooms);
            _rooms.refresh();
            roomsList.addEventListener(ChatElementEvent.CHAT_ELEMENT_CLICK, onChatElementClick);
        }

        private function onChatElementClick(event:ChatElementEvent):void {
            switchChatRoom(event.chatElement.roomId);
        }


        //--------------- API ------------------------//


        public function getRawText():void {
            Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, rawText());
        }


        public function saveAsCSV():void {

            if (!_currentRoom) return;

            const messagesToStr:Array = _currentRoom.all().source.map(function (mes:ChatMessage, ind:int, arr:Array):String {
                return mes.toCSVString();
            });

            const data:String = messagesToStr.join("\n");

            LocalFile.save(data, 'chat_log.csv');

        }

        //--------------- controllers -----------------//


        private function deactivateRoom(room:ChatRoom):void {
            room.active = false;
            room.roomName += ' (' + translate('offline') + ')';

            if (_currentRoom.roomId == room.roomId) {
                label = translate('label', 'chat') + ": " + _currentRoom.roomName;
                inputField.enabled = false;
            }

            if (currentState == roomsState.name) {
                _rooms.source.sort(compareChatRooms);
                _rooms.refresh();
                roomsList.validateNow();
            }
        }

        private function clearChat(roomId:Number):void {

            if (!_roomsById[roomId]) return;

            const room:ChatRoom = _roomsById[roomId] as ChatRoom;

            _unreadCount -= room.unreadMessages;

            room.clear();
        }


        private function sendMessage(body:String):void {

            if (!_currentRoom) return;

            var m:ChatMessage = new ChatMessage(user.sid, _currentRoom.roomId, ChatMessage.MESSAGE, user.extName, body, _myColor);

            rtmp_send(PacketType.CHAT, m, _currentRoom.roomId);   // roomId is equal to Recipients code or user's sid
        }


        private function rawText():String {
            if (!_currentRoom) return '';

            const messagesToStr:Array = _currentRoom.all().source.map(function (mes:ChatMessage, ind:int, arr:Array):String {
                return mes.toString();
            });

            return messagesToStr.join("\n");
        }


        public function addMessage(m:ChatMessage):void {

            if (m.uid == user.sid)
                m.name = translate('me', 'chat');

            if (!_roomsById[m.roomId]) addRoom(m.roomId, m.name, m.uid);   // create private chat with user (so message name == user.extName)

            (_roomsById[m.roomId] as ChatRoom).add(m);

            _lastMessageId = m.id;

            if (_currentRoom.roomId == m.roomId && currentState == chatState.name) {
                messagesList.addEventListener(FlexEvent.UPDATE_COMPLETE, scrollToSelectedIndexHandler);
            } else if (currentState == roomsState.name) {
                _rooms.source.sort(compareChatRooms);
                _rooms.refresh();
                roomsList.validateNow();
                _unreadCount++;
            } else _unreadCount++;


        }

        private function addRoom(id:Number, name:String, user_id:Number = 0):void {

            if (_roomsById[id]) return;

            var room:ChatRoom = new ChatRoom(id, name);

            _roomsById[room.roomId] = room;
            _rooms.addItem(room);

            user_id && (_roomsByUserId[user_id] = room);

        }

        private function switchChatRoom(id:Number):void {

            if (!_roomsById[id]) return;

            _currentRoom.visible = false;

            _currentRoom = _roomsById[id];

            _unreadCount -= _currentRoom.unreadMessages;

            _currentRoom.visible = true;

            label = translate('label', 'chat') + ": " + _currentRoom.roomName;

            messagesList.textFlow = _currentRoom.textFlow;

            inputField.enabled = _currentRoom.active;

            currentState = chatState.name;
        }


        private function searchInRooms():void {
            _rooms.refresh();
        }

        private function filterUsersByName(item:Object):Boolean {
            if (searchField.text == "" || searchField.text == translate('search_field', 'chat'))
                return true;
            if ((item as ChatRoom).roomName.toLowerCase().indexOf(searchField.text.toLowerCase()) >= 0)
                return true;
            else
                return false;

        }

        private function globalEventHandler(evt:GlobalEvent):void {

            if(!_privateChatEnabled) return;

            const room_name:String = (App.meeting.usersByID[Number(evt.value)] as User).extName;

            rtmp_call("create_chat", new mx.rpc.Responder(success, $null), [App.user.sid, Number(evt.value)]);

            function success(room_id:Number):void {
                addRoom(room_id, room_name);
                switchChatRoom(room_id);
            }


        }


        private function compareChatRooms(a:ChatRoom, b:ChatRoom, arr:Array = null):int {

            if (a.system != b.system) return  a.system ? -1 : 1;

            if (a.system && b.system) return a.roomId > b.roomId ? -1 : 1;

            if (a.active != b.active) return a.active ? -1 : 1;

            if (a.unreadMessages == b.unreadMessages) return 0;

            return (a.unreadMessages > b.unreadMessages) ? -1 : 1;
        }


        public function localize():void {
            label = translate('label', 'chat');
        }


        //----------------- get/set -------------------------//


        override public function set permissions(value:uint):void {
            super.permissions = value;

            if (!_initialized) return;

            if (!Permissions.isAdmin(value)) {

                if (!_roomsById[_adminsRoom.roomId]) return;

                if (_currentRoom.roomId == _adminsRoom.roomId) switchChatRoom(Recipients.ALL);

                delete _roomsById[_adminsRoom.roomId];

                _rooms.removeItemAt(_rooms.getItemIndex(_adminsRoom));

                _unreadCount -= _adminsRoom.unreadMessages;
                _adminsRoom.clear();

                _myColor = USER_DEFAULT_COLOR;

            } else {

                if (_roomsById[_adminsRoom.roomId]) return;

                _roomsById[_adminsRoom.roomId] = _adminsRoom;

                _rooms.addItem(_adminsRoom);

                _myColor = ADMIN_DEFAULT_COLOR;

            }

        }

        override public function get settings():Vector.<SettingsItem> {
            return _settings;
        }


        private function get totalUnread():int {
            var i:int = 0;
            for each(var item:ChatRoom in _rooms.toArray()) {
                if (item.unreadMessages > 0)
                    i++;
            }

            if (i > 0)
                unreadGroup.visible = true;
            else
                unreadGroup.visible = false;

            return i;
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
    </fx:Declarations>


    <module:states>
        <s:State id="chatState" name="chat"/>
        <s:State id="roomsState" name="roomsList"/>
    </module:states>

    <s:VGroup gap="0" width="100%" height="100%">

        <ui:HidingScroller width="100%" height="100%" verticalScrollPolicy="on" horizontalScrollPolicy="off"
                           includeIn="chat" id="messagesScroller">
            <s:RichEditableText height="100%" width="100%" id="messagesList" editable="false" paddingLeft="10"
                                paddingRight="10" paddingTop="5" paddingBottom="5">
            </s:RichEditableText>
        </ui:HidingScroller>

        <ui:ScrollList id="roomsList"
                       includeIn="roomsList"
                       itemRenderer="ru.teachbase.module.chat.components.ChatItemRenderer"
                       dataProvider="{_rooms}"
                       width="100%" height="100%"
                       contentBackgroundAlpha="1"
                       useVirtualLayout="false"
                       horizontalScrollPolicy="off"
                       verticalScrollPolicy="auto"
                >
            <ui:layout>
                <s:VerticalLayout gap="0"/>
            </ui:layout>
        </ui:ScrollList>


        <s:Group id="bottomGroup" width="100%" height="46">

            <s:layout>
                <s:BasicLayout/>
            </s:layout>
            <s:Image id="btm_img" initialize="btm_img.source=style('modulecontainer','bottomBackground')" top="0"
                     left="0"
                     right="0" bottom="0" scaleMode="stretch" height="46"/>
            <s:HGroup gap="0" width="100%" height="100%">
                <s:Group>
                    <components:CustomSkinableButton id="roomsView" top="7" left="7"
                                                     includeInLayout="{_privateChatEnabled}"
                                                     visible="{_privateChatEnabled}"
                                                     focusSkin="{null}"
                                                     initialize="with(roomsView) {iconUp=style('chat','usersButton'); iconOver=style('chat','usersButton'); iconDown=style('chat','usersButton'); toolTip=translate('rooms_button', 'chat');}"
                                                     click="roomsListClick(event)"
                                                     skinClass="ru.teachbase.skins.CustomSkiningButtonSkin"/>
                </s:Group>
                <s:Group includeIn="chat" width="100%">
                    <s:TextInput id="inputField"
                                 color="0xB4B4B4"
                                 left="7"
                                 right="28"
                                 height="30"
                                 top="7"
                                 width="100%"
                                 whiteSpaceCollapse="collapse"
                                 initialize="inputField.text = translate('message_field','chat')"
                                 skinClass="ru.teachbase.skins.RoundedTextAreaWithBorder"
                                 focusSkin="{null}"
                                 textInput="typeStarted(event)"
                                 enter="inputFieldEnterHandler(event)"
                            >
                        <s:click>
					<![CDATA[
                                if (inputField.text == translate('message_field', 'chat')) {
                                    inputField.text = "";
                                    inputField.setStyle("color", 0x000000);
                                }
                            ]]>
				</s:click>
                    </s:TextInput>
                    <components:CustomSkinableButton id="sendMessageButton" top="7" right="7"
                                                     click="inputFieldEnterHandler(event)" height="30"
                                                     initialize="with(sendMessageButton){iconUp=style('chat','sendMessageButton');iconOver=style('chat','sendMessageButton');iconDown=style('chat','sendMessageButton'); toolTip=translate('send_button','chat')}"
                                                     skinClass="ru.teachbase.skins.CustomSkiningButtonSkin"/>

                </s:Group>
            </s:HGroup>
            <s:Group includeIn="roomsList" width="100%">
                <s:TextInput id="searchField"
                             color="0xB4B4B4"
                             left="42"
                             right="9"
                             height="30"
                             top="7"
                             width="100%"
                             whiteSpaceCollapse="collapse"
                             initialize="searchField.text = translate('search_field','chat')"
                             skinClass="ru.teachbase.skins.RoundedTextAreaWithBorder"
                             focusSkin="{null}"
                             change="searchInRooms()"
                             enter="searchInRooms()"
                        >
                    <s:click>
					<![CDATA[
                            if (searchField.text == translate('search_field', 'chat')) {
                                searchField.text = "";
                                searchField.setStyle("color", 0x000000);
                            }
                        ]]>
				</s:click>
                </s:TextInput>
                <components:CustomSkinableButton id="findButton"
                                                 top="13" right="15"
                                                 click="searchInRooms()"
                                                 height="18" width="18"
                                                 initialize="with(findButton){iconUp=style('chat','magnifier');iconOver=style('chat','magnifier');iconDown=style('chat','magnifier');}"
                                                 skinClass="ru.teachbase.skins.CustomSkiningButtonSkin"/>

            </s:Group>
            <s:Group top="3" left="27" id="unreadGroup" visible="{_unreadCount > 0 &amp;&amp; _privateChatEnabled}" includeIn="chat">
                <s:BitmapImage id="redCircle" source="{style('chat','redCircle')}" right="0"/>
                <s:Label id="unreadCount" text="{_unreadCount}" fontSize="11" top="2" color="0xFFFFFF" right="3"/>
            </s:Group>
        </s:Group>
    </s:VGroup>

    <chat:TypingBlock bottom="45" width="100%" height="22" id="typingGroup" visible="false">
    </chat:TypingBlock>

</module:ModuleInstance>
