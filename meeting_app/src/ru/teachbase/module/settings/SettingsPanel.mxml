<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               width="566"
               height="575"
               implements="ru.teachbase.utils.interfaces.ILocalable"
               close="closeMe(event)"
               initialize="onAdded(event)"
               mouseDownOutside="closeMe(event)"
               controlBarVisible="false"
               backgroundColor="0xE3E3E3"
               borderColor="0x252525"
               dropShadowVisible="false"
               skinClass="ru.teachbase.skins.TitleWindowSkin">

    <fx:Script>
	<![CDATA[
        import ru.teachbase.constants.PacketType;
        import ru.teachbase.module.settings.events.ChangeSettingsEvent;
        import ru.teachbase.module.settings.model.Setting;
        import ru.teachbase.skins.SettingsButtonBarSkin;
        import ru.teachbase.utils.Configger;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.helpers.*;
        import ru.teachbase.utils.shortcuts.translate;

        import spark.events.IndexChangeEvent;

        private var _settingsToSave:Object = new Object();

        private function onAdded(evt:Event):void {
            invalidatePosition();
            Localizer.addItem(this);
            //     btnBar.dataProvider = (m(SettingsManager) as SettingsManager).panelsList;
            title = translate('global_set', 'settings');
            stage && stage.addEventListener(Event.RESIZE, invalidatePosition, false, 0, true);
        }

        private function invalidatePosition(evt:Event = null):void {
            this.x = (stage.stageWidth - this.width) / 2;
            this.y = (stage.stageHeight - this.height) / 2;
        }

        private function closeMe(evt:Event = null):void {
            stage.removeEventListener(Event.RESIZE, invalidatePosition);
            // Core.removePopupFromTop(this);
        }

        public function navigateToPanel(id:int):void {
            /*while (settingsGroup.numElements > 0) {
             settingsGroup.removeElementAt(0);
             }

             const settingsElement:SettingsElement = (m(SettingsManager) as SettingsManager).getSettingsElement(id);
             if (settingsElement == null) {
             return;
             }
             settingsElement.addEventListener(ChangeSettingsEvent.LOCAL_SETTINGS_CHANGE, onValueChanged);
             settingsGroup.addElement(settingsElement);
             btnBar.selectedIndex = id;
             titleText.text = settingsElement.label ? translate(settingsElement.label, 'settings') : "";   */
        }

        private function onValueChanged(evt:ChangeSettingsEvent):void {
            _settingsToSave[evt.setting.valueName] = evt.setting;
            bottomButtons.visible = true;
        }

        private function changeSelection(event:IndexChangeEvent):void {
            if (event.newIndex == -1)
                return;
            navigateToPanel(event.newIndex)
        }

        private function onAddedToStage(evt:Event = null):void {
            btnBar.setStyle('skinClass', SettingsButtonBarSkin);
            bottomButtons.visible = false
        }

        private function revertChanges():void {
            _settingsToSave = {};
            closeMe();
        }

        private function commitChanges():void {
            for each (var setting:Setting in _settingsToSave) {
                Configger.saveCookie(setting.valueName, setting.value);
                dispatchTraitEvent(PacketType.SETTINGS_CHANGED, setting);
                /* if (setting.callServer)
                 _settingsTrait.output(setting, Recipients.ALL_EXCLUDE_ME);      */
            }

            closeMe();
        }


        public function localize():void {
            title = translate('common_set', 'settings');
            commitBtn && (commitBtn.label = translate('save', 'global'));
            orBtn && (orBtn.text = translate('or'));
            cancelBtn && (cancelBtn.text = translate('cancel'));
            for each(var item:Object in btnBar.dataProvider) {
                btnBar.dataProvider.itemUpdated(item, "label");
            }


        }


        private function getSettingsLabel(item:Object):String {
            return translate(item.loc_id, 'settings');
        }
        ]]>
</fx:Script>
	<s:VGroup>
		<s:Group width="100%" height="50">
			<s:Label color="0x515151" fontSize="16" left="18" bottom="8" id="titleText"/>
		</s:Group>
		<s:HGroup width="100%" height="100%" top="50">
			<s:Group  width="225">
				<s:ButtonBar id="btnBar" width="100%" requireSelection="true"
							 horizontalCenter="0" verticalCenter="0" 
							 change="changeSelection(event)" 
							 labelFunction="getSettingsLabel"
							 addedToStage="onAddedToStage()" 
							 top="10" left="18" right="18" selectedIndex="0">
					<s:layout>
						<s:VerticalLayout gap="1" />
					</s:layout>
				</s:ButtonBar>
			</s:Group>
			<s:VGroup>
				<s:Group clipAndEnableScrolling="true" width="320" height="470">
					<s:Rect  height="100%" width="100%">
						<s:fill>
							<s:SolidColor color="0xDADADA"/>
						</s:fill>
						<s:filters>
							<s:GlowFilter inner="true" color="0x878787" blurX="5" blurY="5" strength="1"/>
						</s:filters>
					</s:Rect>
					<s:Group id="settingsGroup" height="100%" width="100%" />
				</s:Group>
				<s:HGroup visible="false" id="bottomButtons">
					<s:Button  skinClass="ru.teachbase.skins.StandartButton" id="commitBtn" initialize="commitBtn.label=translate('save','global');"
							   click="commitChanges()"/>
					
					<s:Group height="100%">
						<s:Label id="orBtn" initialize="orBtn.text=translate('or')" verticalCenter="0" verticalAlign="middle"/>
					</s:Group>
					<s:Group height="100%">
						<s:Label id="cancelBtn" initialize="cancelBtn.text=translate('cancel')" click="revertChanges()" color="0x0000FF" verticalCenter="0" verticalAlign="middle"/>
					</s:Group>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>
