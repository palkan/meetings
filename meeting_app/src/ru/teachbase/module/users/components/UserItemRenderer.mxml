<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:users="ru.teachbase.module.users.components.*"
                autoDrawBackground="false" width="100%" height="27">
    <fx:Script>
		<![CDATA[
        import ru.teachbase.components.callouts.ConfirmCallout;
        import ru.teachbase.components.callouts.SettingsCallout;
        import ru.teachbase.manage.modules.ModuleID;
        import ru.teachbase.model.App;
        import ru.teachbase.model.User;
        import ru.teachbase.module.users.UsersModule;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.helpers.lambda;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private var _user:User;

        [Bindable]
        private var _name:String = '';

        [Bindable]
        private var _camState:String = BlinkingMultiButton.IDLE;
        [Bindable]
        private var _micState:String = BlinkingMultiButton.IDLE;
        [Bindable]
        private var _docsState:String = BlinkingMultiButton.IDLE;

        private var _module:UsersModule;

        override public function set data(value:Object):void {
            super.data = value;
            if (!(value is User)) {
                return;
            }

            _module = App.meeting.modules[ModuleID.getID(UsersModule)] as UsersModule;

            _user = value as User;

            _name = _user.extName;

            _user.iam && nameLabel.setStyle("fontStyle", "italic");
            !_user.iam && nameLabel.setStyle("fontStyle", "normal");

            var _notAdminNotOwner:Boolean = App.user.isAdmin() && !_user.isAdmin() && !_user.iam;

            _camState = getState(
                    Permissions.camAvailable(_user.shareStatus),
                    _notAdminNotOwner && Permissions.camAvailable(_user.requestStatus),
                    _notAdminNotOwner && Permissions.camAvailable(_user.permissions),
                    _notAdminNotOwner
            );

            _micState = getState(
                    Permissions.micAvailable(_user.shareStatus),
                    _notAdminNotOwner && Permissions.micAvailable(_user.requestStatus),
                    _notAdminNotOwner && Permissions.micAvailable(_user.permissions),
                    _notAdminNotOwner
            );

            _docsState = getState(
                    Permissions.docsAvailable(_user.shareStatus),
                    _notAdminNotOwner && Permissions.docsAvailable(_user.requestStatus),
                    _notAdminNotOwner && Permissions.docsAvailable(_user.permissions),
                    _notAdminNotOwner
            );


        }

        /**
         *
         * Return BLinkingMultiButton state according to params
         *
         * @param share     is now sharing
         * @param request   is now requesting
         * @param right     has right?
         * @param user     is user?
         * @return
         */

        private function getState(share:Boolean, request:Boolean, right:Boolean, user:Boolean):String {

            if (share) return BlinkingMultiButton.ACTIVE;

            if (request) return BlinkingMultiButton.REQUESTED;

            if (right && user) return BlinkingMultiButton.ACCEPTED;

            if (user) return BlinkingMultiButton.ENABLED;

            return BlinkingMultiButton.IDLE;

        }

        private function optionsCallout():void {

            _module && SettingsCallout.open(nameLabel,_module.userOptions(_user));

        }

        private function confirm(type:uint, cont:BlinkingMultiButton):void {


            if (!App.user.isAdmin() || _user.iam) return;


            // first case: accept user request

            if (cont.state == BlinkingMultiButton.REQUESTED) {

                ConfirmCallout.open(
                        cont,
                        requestTextByType(type),
                        translate('Accept'),
                        translate('Decline'),
                        lambda(App.session.setUserRights, _user.sid, type),
                        lambda(App.session.setRequest, type, false, _user.sid)
                );

                return;
            }

            // second case: give a right if it is enabled

            if (cont.state == BlinkingMultiButton.ENABLED) {

                ConfirmCallout.open(
                        cont,
                        translate('Allow') + ' ' + confirmTextByType(type) + '?',
                        translate('Yes'),
                        translate('No'),
                        lambda(App.session.setUserRights, _user.sid, type)
                );

                return;
            }

            // third case: cancel accepted request

            if (cont.state == BlinkingMultiButton.ACCEPTED) {

                ConfirmCallout.open(
                        cont,
                        translate('Disallow') + ' ' + confirmTextByType(type) + '?',
                        translate('Yes'),
                        translate('No'),
                        lambda(App.session.setUserRights, _user.sid, type, false)
                );

                return;
            }


            // and the last one: turn off active user stream

            if (cont.state == BlinkingMultiButton.ACTIVE) {


                ConfirmCallout.open(
                        cont,
                        translate('Turn_off') + ' ' + confirmTextByType(type) + '?',
                        translate('Yes'),
                        translate('No'),
                        lambda(App.streams.closeRemoteStream, _user.sid, type)
                )

                return;
            }


        }

        private function confirmTextByType(type:uint):String {
            switch (type) {
                case Permissions.DOCS:
                    return translate('docs_sharing', 'users');
                case Permissions.CAMERA:
                    return translate('video_sharing', 'users');
                case Permissions.MIC:
                    return translate('audio_sharing', 'users');
            }
            return '';
        }


        private function requestTextByType(type:uint):String {
            switch (type) {
                case Permissions.DOCS:
                    return translate('request_docs', 'users');
                case Permissions.CAMERA:
                    return translate('request_cam', 'users');
                case Permissions.MIC:
                    return translate('request_mic', 'users');
            }
            return '';
        }
        ]]>
	</fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>
    <s:Group width="100%" height="100%" click="optionsCallout()">
        <s:BitmapImage source="{style('users','background')}" fillMode="repeat" width="100%" height="100%"
                       includeIn="normal"/>
        <s:BitmapImage source="{style('users','backgroundHover')}" fillMode="repeat" width="100%" height="100%"
                       includeIn="hovered"/>
    </s:Group>
    <s:Group id="calloutGroup" width="100" mouseChildren="false" mouseEnabled="false">
        <s:Label text="{_name}" id="nameLabel" fontSize="13" mouseEnabled="false" left="28" top="5"/>
    </s:Group>
    <s:HGroup right="12" top="0" bottom="0" height="100%">
        <s:Group height="100%">
        <users:BlinkingMultiButton id="docsButton"
                                   verticalCenter="0"
                                   iconActive="{style('users','docsActive')}"
                                   iconRequested="{style('users','docsRequested')}"
                                   iconEnabled="{style('users','docsEnabled')}"
                                   state="{_docsState}"
                                   click="confirm(Permissions.DOCS, docsButton)"
                ></users:BlinkingMultiButton>
        </s:Group>
        <s:Group height="100%">
        <users:BlinkingMultiButton id="camButton"
                                   verticalCenter="0"
                                   iconActive="{style('users','camActive')}"
                                   iconRequested="{style('users','camRequested')}"
                                   iconEnabled="{style('users','camEnabled')}"
                                   state="{_camState}"
                                   click="confirm(Permissions.CAMERA,camButton)"
                ></users:BlinkingMultiButton>
        </s:Group>
        <s:Group height="100%">
        <users:BlinkingMultiButton id="micButton"
                                   verticalCenter="0"
                                   iconActive="{style('users','micActive')}"
                                   iconRequested="{style('users','micRequested')}"
                                   iconEnabled="{style('users','micEnabled')}"
                                   state="{_micState}"
                                   click="confirm(Permissions.MIC,micButton)"
                ></users:BlinkingMultiButton>
        </s:Group>
    </s:HGroup>

    <s:layout>
        <s:BasicLayout/>
    </s:layout>
</s:ItemRenderer>
