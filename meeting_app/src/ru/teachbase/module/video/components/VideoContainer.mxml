<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx" 
			  minWidth="64"
			  minHeight="48"
			  implements="ru.teachbase.module.video.components.IVideoContainer"
			  rollOver="_mouseOver = true" 
			  rollOut="_mouseOver = false">
	
	<fx:Script>
		<![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.core.App;
        import ru.teachbase.manage.PublishManager;
        import ru.teachbase.utils.helpers.*;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;

        private var video:Video = null;

        [Bindable]
        public var stream:NetStream = null;

        private var _camera:Camera = null;

        [Bindable]
        private var userName:String;

        public var userId:Number;

        [Bindable]
        private var _paused:Boolean;

        [Bindable]
        private var _mouseOver:Boolean;

        private var _isAdmin:Boolean;

        private var _rotated:Boolean = false;

        [Event(name="removeVideo")]
        [Event(name="removeStream")]
        [Event(name="removeUserStream")]

        private function onCloseHandler(event:MouseEvent = null):void {

            if (stream) {
                this.dispatchEvent(new Event("removeUserStream"));
                //stream.removeEventListener(NetStatusEvent.NET_STATUS, statusHandler);
                _paused = false;
            } else {

                removeThis();

            }

        }


        private function removeThis():void {

            /*if (stream)
             stream.removeEventListener(NetStatusEvent.NET_STATUS, statusHandler);*/

            this.dispatchEvent(new Event("removeStream"));
            _paused = false;

        }


        private function onPauseCamera(event:Event = null):void {
            _paused = true;
            video && video.attachCamera(null);
            (m(PublishManager) as PublishManager).pauseCameraSharing()

        }

        private function onPlayCamera(event:Event = null):void {
            _paused = false;
            video && camera && video.attachCamera(camera);

            (m(PublishManager) as PublishManager).playCameraSharing()
        }

        private function onStreamPause():void {
            stream && stream.receiveVideo(false);
            _paused = true;
        }

        private function onStreamPlay():void {
            stream && stream.receiveVideo(true);
            _paused = false;
        }


        public function set from(userId:Number):void {
            userName = App.room.getUserNameById(userId);
            this.userId = userId;
        }

        public function get from():Number {
            return this.userId;
        }

        private function creationCompleteHandler(e:FlexEvent):void {
            video = new Video();
            video.smoothing = true;
            video.deblocking = 5;

            if (stream)
                video.attachNetStream(stream);


            if (camera)
                video.attachCamera(camera);

            uic.addChild(video);
            /*if (stream != null) {
             stream.addEventListener(NetStatusEvent.NET_STATUS, statusHandler,false,EventPriority.CURSOR_MANAGEMENT);
             }*/
        }

        private function statusHandler(e:NetStatusEvent):void {
            switch (e.info.code) {
                case('NetConnection.Connect.Closed'):
                case('NetStream.Connect.Closed'):
                case('NetStream.Play.Failed'):
                case('NetStream.Play.Stop'):
                {
                    //removeThis();
                    break;
                }
                /*case('NetStream.Share.Audio'):
                 {
                 removeThis();
                 break;
                 }
                 case('NetStream.Share.Video'):
                 {
                 //removeThis();
                 break;
                 }*/
            }
        }


        public function setRect(x:int, y:int, width:int, height:int):void {

            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            uic.height = height;
            uic.width = width;

            sizeVideo(width, height);
        }

        override public function setActualSize(w:Number, h:Number):void {

            super.setActualSize(w, h);
            uic.height = h;
            uic.width = w;
            sizeVideo(w, h);
        }

        [Bindable]
        public function get camera():Camera {
            return _camera;
        }

        public function set camera(value:Camera):void {
            _camera = value;
            if (_camera == null && video) {
                video.attachCamera(null);
            }
            video && video.attachCamera(_camera);
        }

        [Bindable]
        public function get isAdmin():Boolean {
            return _isAdmin;
        }

        public function set isAdmin(value:Boolean):void {
            _isAdmin = value;
        }

        public function rotateVideo(rotation:int):void {
            if (!video) return;

            var _oldRotation:int = video.rotation;

            var _m:Matrix = video.transform.matrix.clone();
            _m.rotate(-(Math.PI / 180) * _oldRotation);
            _m.tx = 0;
            _m.ty = 0;

            rotation && _m.rotate(rotation * Math.PI / 2);

            video.transform.matrix = _m;

            _rotated = (rotation !== 0);

            sizeVideo(this.width, this.height);
        }

        protected function sizeVideo(w:int, h:int):void {

            if (!video) return;


            if (_rotated) {

                if (!video.width || !video.height) {

                    video.width = .75 * h;
                    video.height = h;

                } else {

                    var _m:Matrix = video.transform.matrix.clone();

                    var _scale:Number = h / video.height;

                    _m.scale(_scale, _scale);

                    video.transform.matrix = _m;
                }

                var _videoCenter:Point = video.localToGlobal(new Point((video.height / 2) / video.scaleY, (video.width / 2) / video.scaleX));
                var _contLeft:Point = this.localToGlobal(new Point(w / 2, h / 2));

                var _delta:Point = _videoCenter.subtract(_contLeft);


                video.x = -_delta.x;
                video.y = -_delta.y;

            } else {

                if (!video.width || !video.height) {

                    video.width = w;
                    video.height = h;

                } else {


                    var _m:Matrix = video.transform.matrix.clone();

                    var _scale:Number = w / video.width;

                    _m.scale(_scale, _scale);

                    video.transform.matrix = _m;

                }

                video.x = 0;
                video.y = 0;
            }
        }
        ]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x000000" alpha=".9">
			</s:SolidColor>
		</s:fill>
	</s:Rect>
	<mx:UIComponent id="uic" initialize="creationCompleteHandler(event)" width="{this.width}" height="{this.height}" />
	<s:Button x="{this.width - 30}" y="10" label="x" width="16" height="16" 
			  click="onCloseHandler(event)" 
			  skinClass="ru.teachbase.skins.SimpleButtonSkin" 
			  id="closeButton"
			  initialize="closeButton.setStyle('icon',style('video','closeButton'))"
			  visible="{_mouseOver &amp;&amp; _isAdmin}"/>
	<s:Rect width="{this.width}" height="24" left="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.6"/>
		</s:fill>
	</s:Rect>
	<s:Label width="90%" text="{userName}" left="10" bottom="3" color="0xFFFFFF"/>
	
	<s:Button id="playButton" 
			  skinClass="ru.teachbase.skins.SimpleButtonSkin" 
			  initialize="playButton.setStyle('icon',style('video','playButton'))"
			  bottom="3" right="2" visible="{_paused &amp;&amp; camera &amp;&amp; _mouseOver}" click="onPlayCamera()"/>
	<s:Button id="playButtonPause" 
			  skinClass="ru.teachbase.skins.SimpleButtonSkin" 
			  initialize="playButtonPause.setStyle('icon',style('video','playButtonPused'))"
			  bottom="3" right="2" visible="{!_paused &amp;&amp; camera &amp;&amp; _mouseOver}" click="onPauseCamera()" />
	<s:Button id="streamButton" 
			  skinClass="ru.teachbase.skins.SimpleButtonSkin" 
			  initialize="streamButton.setStyle('icon',style('video','cameraButton'))"
			  bottom="3" right="2" visible="{_paused &amp;&amp; stream &amp;&amp; _mouseOver}" click="onStreamPlay()"/>
	<s:Button id="streamButtonPause" 
			  skinClass="ru.teachbase.skins.SimpleButtonSkin" 
			  initialize="streamButtonPause.setStyle('icon',style('video','cameraButtonPaused'))"
			  bottom="3" right="2" visible="{!_paused &amp;&amp; stream &amp;&amp; _mouseOver}" click="onStreamPause()"/>
</s:Group>
