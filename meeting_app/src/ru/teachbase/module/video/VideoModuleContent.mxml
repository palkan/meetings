<?xml version="1.0" encoding="utf-8"?>
<module:ModuleInstance xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:components="ru.teachbase.components.*"
                       xmlns:layout="ru.teachbase.layout.*" xmlns:module="ru.teachbase.components.module.*"
                       implements="ru.teachbase.utils.interfaces.ILocalable"
                       creationComplete="creationCompleteHandler(event)" addedToStage="addedToStage(event)">
    <fx:Script>
		<![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.FlexEvent;
        import mx.events.PropertyChangeEvent;

        import ru.teachbase.events.ChangeEvent;
        import ru.teachbase.events.GlobalEvent;

        import ru.teachbase.manage.streams.model.NetStreamClient;
        import ru.teachbase.manage.streams.model.StreamType;
        import ru.teachbase.model.App;
        import ru.teachbase.module.video.components.IVideoContainer;
        import ru.teachbase.module.video.components.VideoContainer;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private var _elements:Vector.<IVideoContainer> = new Vector.<IVideoContainer>;

        [Bindable]
        private var _camVideoContainerInstance:IVideoContainer;

        [Bindable]
        private var _streams:int = 0;

        private var _streamsDic:Dictionary = new Dictionary(true);

        [Bindable]
        private var _p_enabled:Boolean = false;

        private function addedToStage(evt:Event):void {
            App.publisher.enable();
        }

        private function creationCompleteHandler(event:FlexEvent):void {

            label = translate('label', 'video');

            Localizer.addItem(this);

            _p_enabled = Permissions.camAvailable(App.user.permissions);

            for each(var ns:NetStream in App.meeting.streamList.toArray().filter(filter))
                addVideo(ns);

            App.meeting.streamList.addEventListener(CollectionEvent.COLLECTION_CHANGE, onStreamChangeEvent);

            App.user.addEventListener(ChangeEvent.CHANGED, userChangeHandler);

            GlobalEvent.addEventListener(GlobalEvent.RECONNECT, handleReconnect);

        }


        private function handleReconnect(e:GlobalEvent):void{

            _p_enabled = Permissions.camAvailable(App.user.permissions);

            for each(var ns:NetStream in App.meeting.streamList.toArray().filter(filter))
                addVideo(ns);

        }


        private function userChangeHandler(e:ChangeEvent):void{

            if(e.property != "shareStatus") return;

            if(App.user.sharing.videoSharing) addCamera(App.publisher.camera);
            else removeCamera();

        }


        private function onStreamChangeEvent(e:CollectionEvent):void {

             switch(e.kind){
                 case CollectionEventKind.REMOVE:{
                         for each(var ns:NetStream in e.items){
                            if(_streamsDic[ns]){
                                removeVideo(_streamsDic[ns]);
                            }
                         }
                 break;
                 }
                 case CollectionEventKind.ADD:{
                     for each(var ns:NetStream in e.items.filter(filter))
                         addVideo(ns);
                     break;
                 }
                 case CollectionEventKind.UPDATE:{
                    for each(var prop:PropertyChangeEvent in e.items){
                        if(filter(prop.source as NetStream)) addVideo(prop.source as NetStream);
                        else if(!(prop.source as NetStream).client.hasVideo) removeVideo(_streamsDic[prop.source]);
                    }
                    break;
                 }
                 case CollectionEventKind.RESET:{
                    for each(var el:IVideoContainer in _elements) removeVideo(el);
                 }
             }
        }


        private function filter(stream:NetStream, index:int = 0, arr:Array = null):Boolean {
            return Boolean(stream && (stream.client as NetStreamClient) && (stream.client as NetStreamClient).data.type == StreamType.MEDIA && (stream.client as NetStreamClient).hasVideo && (!(_streamsDic[stream])));
        }

        private function getVideoContainer(userId:Number):IVideoContainer {
            for each (var vc:IVideoContainer in _elements) {
                if (vc.from == userId) {
                    return vc;
                }
            }
            return null;
        }


        private function addVideo(ns:NetStream = null):void {

            const userId:Number = (ns.client as NetStreamClient) ? (ns.client as NetStreamClient).data.user_id : null;

            if(!userId) return;

            var vc:VideoContainer = new VideoContainer();

            vc.stream = ns;
            vc.from = userId;
            vc.isAdmin = Permissions.isAdmin(permissions);
            vc.addEventListener("removeStream", onRemoveLocalStream);
            vc.addEventListener("removeUserStream", onRemoveUserStream);
            vc.addEventListener("removeVideo", onRemoveLocalVideo);

            _elements.push(vc);
            _streamsDic[ns] = vc;
            videoCont.addElement(vc);
            _streams++;
        }

        private function addCamera(cam:Camera):void {

            if (!_camVideoContainerInstance) {
                _camVideoContainerInstance = new VideoContainer();
                _camVideoContainerInstance.isAdmin = true;
                _camVideoContainerInstance.addEventListener("removeStream", onRemoveLocalStream);
                _elements.push(_camVideoContainerInstance);
                _camVideoContainerInstance.camera = cam;
                videoCont.addElement(_camVideoContainerInstance);
            } else {
                _camVideoContainerInstance.camera = cam;
            }
        }

        private function removeVideo(vc:IVideoContainer):void {
            _elements.splice(_elements.indexOf(vc), 1);
            if (vc.stage)
                videoCont.removeElement(vc);
            delete _streamsDic[vc.stream];
            vc = null;
            _streams--;
        }

        private function removeCamera():void {
            if (_camVideoContainerInstance) {
                _elements.splice(_elements.indexOf(_camVideoContainerInstance), 1);
                videoCont.removeElement(_camVideoContainerInstance);
                _camVideoContainerInstance.camera = null;
                _camVideoContainerInstance = null;
            }
        }

        private function onRemoveLocalStream(event:Event):void {
            const vc:IVideoContainer = event.target as IVideoContainer

            removeVideoContainer(vc);
        }


        private function onRemoveUserStream(event:Event):void {
            const vc:IVideoContainer = event.target as IVideoContainer
            App.streams.closeRemoteStream(vc.from);
        }

        private function onRemoveLocalVideo(event:Event):void {
            const vc:IVideoContainer = event.target as IVideoContainer;
            removeVideoContainer(vc);
        }

        private function removeVideoContainer(vc:IVideoContainer):void {
            if (!vc.camera) {
                removeVideo(vc as IVideoContainer);
            } else {
                App.publisher.closeCamera();
            }
        }

        override public function hide():void {
            super.hide();
            App.publisher.disable();

            for each(var el:IVideoContainer in _elements) {
                removeVideoContainer(el);
            }
        }


        public function localize():void {
            label = translate('label', 'video');
            bottomButton && (bottomButton.label = translate('turn_on_cam', 'settings'));
            bigBlbl && (bigBlbl.text = translate('turn_on_cam', 'settings'));
        }


        override public function set permissions(value:uint):void {
            _p_enabled = Permissions.camAvailable(value);

            for each(var el:IVideoContainer in _elements)
                el.isAdmin = Permissions.isAdmin(value);


            super.permissions = value;
        }
        ]]>
	</fx:Script>

    <s:Group id="videoCont" width="100%" height="100%">
        <s:layout>
            <layout:VideoLayout ratio="0.75"/>
        </s:layout>
    </s:Group>
    <s:VGroup horizontalCenter="0" verticalCenter="0"
              visible="{_camVideoContainerInstance == null &amp;&amp; _streams == 0 &amp;&amp; _p_enabled}">
        <components:CustomSkinableButton id="bigButton"
                                         initialize="with(bigButton){iconUp=style('video','bigCameraButton');iconDown=style('video','bigCameraButtonDown');iconOver=style('video','bigCameraButtonHover');}"
                                         skinClass="ru.teachbase.skins.CustomSkiningButtonSkin" focusSkin="{null}"
                                         click="App.publisher.toggleStartCamera()">
        </components:CustomSkinableButton>
        <s:Label id="bigBlbl" initialize="bigBlbl.text=translate('turn_on_cam','settings')" textAlign="center"
                 width="100%" color="0x8196A6"/>
    </s:VGroup>
    <s:Group width="100%" bottom="0" left="0" right="0"
             visible="{_camVideoContainerInstance == null &amp;&amp; _streams > 0 &amp;&amp; _p_enabled}"
             show="videoCont.bottom = 46" hide="videoCont.bottom = 0">
        <s:layout>
            <s:BasicLayout/>
        </s:layout>
        <s:Image source="{style('modulecontainer','bottomBackground')}" top="0" left="0" right="0" bottom="0"
                 scaleMode="stretch" height="46"/>
        <components:CustomSkinableButton horizontalCenter="0" bottom="6" id="bottomButton"
                                         initialize="with(bottomButton){label=translate('turn_on_cam','settings');iconUp=style('video','bottomCameraButton');iconDown=style('video','bottomCameraButtonDown');iconOver=style('video','bottomCameraButtonHover');}"
                                         skinClass="ru.teachbase.skins.StandartButtonWithIcon"
                                         click="App.publisher.toggleStartCamera()">
        </components:CustomSkinableButton>
    </s:Group>
</module:ModuleInstance>
