<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         width="50" height="150"
         initialize="init(event)" xmlns:components="ru.teachbase.components.*"
         xmlns:layout="ru.teachbase.module.board.components.*">

    <fx:Metadata>
		[Event(name="undo_redo", type="ru.teachbase.events.WhiteBoardEvent")]
		[Event(name="tool", type="ru.teachbase.events.WhiteBoardEvent")]
		[Event(name="property", type="ru.teachbase.events.WhiteBoardEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
        import caurina.transitions.Tweener;

        import mx.events.FlexEvent;

        import ru.teachbase.events.WhiteBoardEvent;
        import ru.teachbase.utils.data.SKArray;
        import ru.teachbase.utils.helpers.*;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private var _props:SKArray;

        [Bindable]
        private var _current:WBButton = null;


        private var undoredo:WBUndoRedoButton;

        private const BUTTON_WIDTH:int = 35;
        private const BUTTON_HEIGHT:int = 29;

        private var _defaulProps:Object = {
            stroke: 1,
            color: 0x101010
        };

        protected function init(event:FlexEvent):void {
            // TODO Auto-generated method stub

            _props = new SKArray();

            this.addEventListener(WhiteBoardEvent.UNDOREDO, onUndoRedo, true);
            this.addEventListener(WhiteBoardEvent.PROPERTY, onPropertyChanged, true);
            this.addEventListener(WhiteBoardEvent.TOOL, onToolChanged, true);

            addbuttons_test();

            onHideShow(null);

        }


        private function addbuttons_test():void {

            addUndoRedo();
            addButton("tool", "pointer", false);
            addButton("tool", "pencil", false, ["stroke", "color"]);
            addButton("tool", "marker", false, ["stroke", "color"]);
            addButton("tool", "text", false, ["color"]);
            addButtonGroup(["line", "circle", "rectangle"], [
                ["stroke", "color"],
                ["color"],
                ["color"]
            ]);
            addButton("tool", "eraser", false);
            addProperty("stroke", [
                {value: 1, active: true},
                {value: 2, active: false},
                {value: 3, active: false},
                {value: 4, active: false}
            ]);
            addProperty("color", [
                {value: 0x101010, active: true},
                {value: 0xffffff, active: false},
                {value: 0xff0100, active: false},
                {value: 0xffcc00, active: false},
                {value: 0x26be02, active: false},
                {value: 0x0083eb, active: false},
                {value: 0x8800ea, active: false},
                {value: 0xed0377, active: false}
            ]);


        }


        protected function onUndoRedo(event:WhiteBoardEvent):void {

        }

        protected function onPropertyChanged(event:WhiteBoardEvent):void {
            // TODO Auto-generated method stub
            _current.propsValue[_current.props.indexOf(event.propertyId)] = event.value;


        }

        protected function onToolChanged(event:WhiteBoardEvent):void {

            var _but:WBButton = event.target as WBButton;
            if (_current)
                _current.enabled = true;

            _but.enabled = false;

            _current = _but;

            activateCurrentProps(true);


            lt.updateDisplayList(tools_gr.width, tools_gr.height);
        }


        private function activateCurrentProps(dispatch:Boolean = false):void {

            if (!_current)
                return;

            for (var i:int = 0; i < _props.length; i++) {

                //(_props.getByIndex(i) as IWBComponent).active = false;
                (_props.getByIndex(i) as WBList).host.active = false;
            }


            if (_current.props) {

                for (var j:int = 0; j < _current.props.length; j++) {

                    if (_props.get(_current.props[j]) != undefined) {
                        //(_props.get(_current.props[j]) as IWBComponent).active = true;
                        (_props.get(_current.props[j]) as WBList).current = _current.propsValue[j];
                        (_props.get(_current.props[j]) as WBList).host.active = true;
                        if (dispatch && _current.propsValue[j] != 0)
                            dispatchEvent(new WhiteBoardEvent(WhiteBoardEvent.PROPERTY, _current.propsValue[j], null, _current.props[j]));
                    }

                }
            }

        }


        /** Add undo/redo button.
         *
         * <b> This button must be added first and after setting up redoNum and undoNum values.</b>
         *
         * @param u undo number
         * @param r redo number
         */

        public function addUndoRedo(u:uint = 0, r:uint = 0):void {
            undoredo = new WBUndoRedoButton();
            undoredo.active = true;
            undoredo.width = BUTTON_WIDTH;
            undoredo.height = BUTTON_HEIGHT;
            tools_gr.addElementAt(undoredo, 0);

            redo = false;
            undo = false;
        }


        /**
         * Add tool button to controlbar.
         *
         * @param type tool ID
         * @param icon
         * @param value tool value (ususally, the same as tool ID)
         * @parm _default
         * @param props array of strings representing properties' ids
         */


        public function addButton(type:String, icon:String, _default:Boolean = false, props:Array = null):void {

            var _but:WBButton = createButton(type, icon, _default, props);

            tools_gr.addElementAt(_but, tools_gr.numElements - _props.length);


        }


        private function createButton(type:String, icon:String, _default:Boolean = false, props:Array = null):WBButton {
            var _but:WBButton = new WBButton();
            _but.type = type;
            _but.value = icon;
            _but.active = true;
            _but.icon = style("wb", icon);
            _but.enabled = !_default;
            if (_default)
                _current = _but;

            _but.width = BUTTON_WIDTH;
            _but.height = BUTTON_HEIGHT;

            if (props) {

                _but.props = new Vector.<String>();
                _but.propsValue = new Array();

                for each(var p:String in props) {

                    _but.props.push(p);
                    _but.propsValue.push(_defaulProps[p]);

                }

            }


            return _but;
        }


        private function addButtonGroup(types:Array, props:Array):void {

            var _dp:Vector.<WBButton> = new Vector.<WBButton>();
            var _i:int = 0;

            for each(var _type:String in types) {

                _dp.push(createButton("tool", _type, false, props[_i]));
                _i++;

            }

            var _butGroup:WBButtonGroup = new WBButtonGroup();
            _butGroup.active = true;
            _butGroup.dataProvider = _dp;

            tools_gr.addElementAt(_butGroup, tools_gr.numElements - _props.length);
        }


        /** Add property list to controlbar.
         *
         * @param propertyId
         * @param dp properties list data provider - an array of objects {value:*,active:Boolean}
         */


        public function addProperty(propertyId:String, dp:Array):void {

            if (_props.get(propertyId) != undefined)
                return;

            var _but:WBButton = new WBButton();
            _but.type = "";
            _but.width = BUTTON_WIDTH;
            _but.height = BUTTON_HEIGHT;


            var _list:WBList = new WBList();
            _list.includeInLayout = false;
            _list.host = _but;
            _list.width = BUTTON_WIDTH;
            _list.height = BUTTON_HEIGHT;
            _list.propertyId = propertyId;
            _list.dataProvider = dp;
            _props.add(propertyId, _list);
            tools_gr.addElementAt(_but, tools_gr.numElements);
            tools_gr.addElementAt(_list, tools_gr.numElements);

            activateCurrentProps();

        }


        public function set redo(value:Boolean):void {

            if (undoredo)
                undoredo.redo.enabled = value;

        }

        public function set undo(value:Boolean):void {
            if (undoredo)
                undoredo.undo.enabled = value;
        }


        protected function onHideShow(event:MouseEvent):void {
            if (main.x < 0) {
                Tweener.addTween(main, {x: 0, time: 0.3, transition: "linear"});
                currentIcon.toolTip = translate("hide");
            } else {
                Tweener.addTween(main, {x: -this.BUTTON_WIDTH, time: 0.3, transition: "linear"});
                currentIcon.toolTip = translate("show");
                dispatchEvent(new WhiteBoardEvent(WhiteBoardEvent.TOOL));
            }


        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group id="main">
		<components:CustomSkinableButton id="currentIcon"  right="16" width="19" top="19" click="onHideShow(event)" 
										 skinClass="ru.teachbase.skins.CustomSkiningButtonSkin"
										 initialize="with(currentIcon){toolTip=translate('show'); iconOver=ru.teachbase.utils.helpers.style('wb','handleOver');iconDown=ru.teachbase.utils.helpers.style('wb','handleOver');iconUp=ru.teachbase.utils.helpers.style('wb','handle'); icon=ru.teachbase.utils.helpers.style('wb','handleIcon');}"
										 />

	<s:Group id="tools_gr" width="70" height="350">
		<s:layout>
			<layout:WBListLayout orientation="{WBListLayout.VERTICAL}" id="lt" gap="1"/>
		</s:layout>
	</s:Group>
	
	</s:Group>


	
</s:Group>
