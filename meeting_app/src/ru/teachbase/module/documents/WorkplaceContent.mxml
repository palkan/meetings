<?xml version="1.0" encoding="utf-8"?>
<module:ModuleInstance xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:components="ru.teachbase.components.*"
                           xmlns:com="ru.teachbase.module.documents.components.*"
                           xmlns:module="ru.teachbase.components.module.*"
                           implements="ru.teachbase.utils.interfaces.ILocalable"
                           initialize="Localizer.addItem(this);label=translate('label','docs')"
                           creationComplete="creationCompleteHandler(event)"
                           clipAndEnableScrolling="true"
                           currentState="idle">
    <fx:Script>
		<![CDATA[
        import mx.rpc.Responder;

        import ru.teachbase.components.callouts.SettingsItem;
        import ru.teachbase.constants.PacketType;
        import ru.teachbase.events.GlobalEvent;
        import ru.teachbase.manage.rtmp.RTMPListener;
        import ru.teachbase.manage.rtmp.events.RTMPEvent;
        import ru.teachbase.model.App;
        import ru.teachbase.model.User;
        import ru.teachbase.module.documents.model.DocumentData;
        import ru.teachbase.module.documents.model.FileItem;
        import ru.teachbase.module.documents.model.WorkplaceData;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.*;

        private var _listener:RTMPListener;

        private var _settings:Vector.<SettingsItem> = new Vector.<SettingsItem>();

        private var _module:DocumentsModule;

        private var _currentDoc:DocumentData;

        //-------------------------- initialize -------------------------------//

        override public function init():void {

            _listener = new RTMPListener(PacketType.WORKPLACE + "::" + this.instanceID, true);

            _listener.addEventListener(RTMPEvent.DATA, handleMessage);

        }

        protected function creationCompleteHandler(e:Event = null):void {

            _settings.push(new SettingsItem("clear_workplace", SettingsItem.FUN, clearWorkspace));
            _settings.push(new SettingsItem("open_document", SettingsItem.FUN, loadDocument));
            _settings.push(new SettingsItem("save_screenshot", SettingsItem.FUN, container.takeSnapshot))

            permissions = App.user ? App.user.permissions : 0;

            _module = (ownerModule as DocumentsModule);

            GlobalEvent.addEventListener(GlobalEvent.RECONNECT, handleReconnect);

            rtmp_history(PacketType.WORKPLACE + "::" + this.instanceID, new mx.rpc.Responder(historyHandler, $null));
        }


        //---------------------------- API ------------------------------------//


        public function attachDocument(doc:DocumentData) {
            if (!doc) return;

            App.docs.addDocument(doc, this.instanceID);

            _currentDoc = doc;

            currentState = active.name;
            container.init(doc);
        }


        public function detachDocument(commit:Boolean = true) {

            commit && App.docs.detachDocument(_currentDoc);

            container.dispose();

            _currentDoc = null;

            currentState = idle.name;
        }


        public function inProgress(id:Number) {
            currentState = progress.name;
            if (App.meeting.usersByID[id]) progressText.text = translate("progress", "docs", (App.meeting.usersByID[id] as User).fullName);
        }


        public function clearWorkspace():void {
            rtmp_send(PacketType.WORKPLACE + "::" + this.instanceID, new WorkplaceData({type: "idle"}));
        }

        //------------------------ private -------------------------//

        private function processData(data:WorkplaceData):void {


            if (data.type == "idle" && currentState != idle.name) {
                detachDocument();
            }

            if (data.type == "progress") {
                inProgress(data.id);
            }


            if (data.type == "active") {
                (currentState == active.name) && detachDocument();
                attachDocument(data.data);
            }

        }


        // ----------------------- handlers -----------------------//

        private function historyHandler(data:WorkplaceData):void {

            data && processData(data);

            _listener.readyToReceive = true;
            _initialized = true;
        }

        private function historyReconnectHandler(data:WorkplaceData):void {

            // check if we using the same document as loaded

            if (_currentDoc && data && data.type == "active" && _currentDoc.id == (data.data as DocumentData).id) {
                container.handleReconnect(data.data.state);
            } else if (data)
                processData(data);
            else
                _currentDoc && detachDocument(false);

            _listener.readyToReceive = true;
            _initialized = true;
        }


        private function handleReconnect(e:GlobalEvent):void {

            _initialized = false;

            _listener.dispose();
            _listener.initialize();

            permissions = App.user ? App.user.permissions : 0;

            rtmp_history(PacketType.WORKPLACE + "::" + this.instanceID, new mx.rpc.Responder(historyReconnectHandler, $null));
        }


        private function handleMessage(e:RTMPEvent):void {
            const data:WorkplaceData = e.packet.data as WorkplaceData;

            if (!data) return;

            processData(data);
        }


        public function loadDocument(e:Event = null):void {
            _module.uploader.callback = uploaderHandler;
            App.view.lightbox.show(_module.uploader);
        }


        private function uploaderHandler(data:DocumentData = null):void {

            App.view.lightbox.close();

            if (!data) return;

            if (!data.id) create_document(data.file);
            else
                rtmp_send(PacketType.WORKPLACE + "::" + this.instanceID, new WorkplaceData({type: "active", data: data}));

        }


        protected function wbHandler(e:MouseEvent):void {
            create_document(new FileItem(translate("whiteboard", "docs"), "", "", "wb"));
        }


        private function create_document(file:FileItem):void {
            rtmp_call("create_document", null, file, this.instanceID);
        }


        // ---------------- implement ------------------------//


        public function localize():void {

            label = translate('label', 'docs');
            progressText && (progressText.text = translate('Loading'));
            doc && (doc.label = translate('Load_files', 'docs'));
            white && (white.label = translate('Whiteboard', 'docs'));
        }


        override public function hide():void {
            _currentDoc && detachDocument();
            _listener && _listener.dispose();
            _initialized = false;
            GlobalEvent.removeEventListener(GlobalEvent.RECONNECT, handleReconnect);
            super.hide();
        }


        //------------------- get/set ----------------------------//

        override public function set permissions(value:uint):void {

            const flag:Boolean = Permissions.docsAvailable(value);

            idleGroup && (idleGroup.visible = flag);
            container && (container.editable = flag);
        }


        override public function get settings():Vector.<SettingsItem> {

            return _settings;

        }
        ]]>
	</fx:Script>
    <module:states>
        <s:State id="active" name="active"/>
        <s:State id="idle" name="idle"/>
        <s:State id="progress" name="progress"/>
    </module:states>

    <com:WorkplaceContainer id="container"
                            width="{this.width}" height="{this.height}"
                            />

    <s:Label id="progressText" initialize="progressText.text=translate('Loading')" horizontalCenter="0"
             includeIn="progress" verticalCenter="-60"/>

    <s:VGroup verticalCenter="0" horizontalCenter="0" includeIn="progress">
        <s:BusyIndicator rotationInterval="50" symbolColor="0x71a7cd" width="60" height="60"/>
    </s:VGroup>

    <s:Group id="idleGroup" width="400" height="260" horizontalCenter="0" verticalCenter="0" includeIn="idle"
             visible="false">
        <s:VGroup horizontalCenter="0" top="50">
            <s:VGroup horizontalCenter="0" width="176">

                <components:CustomSkinableButton id="doc" width="176" click="loadDocument(event)"
                                                 focusSkin="{null}"
                                                 skinClass="ru.teachbase.skins.StandartButtonWithIcon"
                                                 initialize="with(doc){label=translate('Load_files','docs');iconUp=style('docs','uploadFile'); iconDown=style('docs','uploadFileDown'); iconOver=style('docs','uploadFileHover')}"
                        />
                <components:CustomSkinableButton id="white" width="176" click="wbHandler(event)" focusSkin="{null}"
                                                 skinClass="ru.teachbase.skins.StandartButtonWithIcon"
                                                 initialize="with(white){label=translate('Whiteboard','docs');iconUp=style('docs','whitebordButton');iconDown=style('docs','whitebordButtonDown');iconOver=style('docs','whitebordButtonHover')}"
                        />
            </s:VGroup>

        </s:VGroup>
    </s:Group>


</module:ModuleInstance>
