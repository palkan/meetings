<?xml version="1.0" encoding="utf-8"?>
<module:ModuleInstance xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:components="ru.teachbase.components.*"
                           xmlns:com="ru.teachbase.module.documents.components.*"
                           xmlns:module="ru.teachbase.components.module.*"
                           implements="ru.teachbase.utils.interfaces.ILocalable"
                           initialize="Localizer.addItem(this);label=translate('label','docs')"
                           creationComplete="creationCompleteHandler(event)"
                           clipAndEnableScrolling="true"
                           currentState="idle">
    <fx:Script>
		<![CDATA[
        import mx.rpc.Responder;

        import ru.teachbase.components.callouts.SettingsItem;
        import ru.teachbase.constants.PacketType;
        import ru.teachbase.manage.rtmp.RTMPListener;
        import ru.teachbase.manage.rtmp.events.RTMPEvent;
        import ru.teachbase.manage.rtmp.model.Recipients;
        import ru.teachbase.model.App;
        import ru.teachbase.model.User;
        import ru.teachbase.module.documents.components.SelectSourceWindow;
        import ru.teachbase.module.documents.model.DocumentData;
        import ru.teachbase.module.documents.model.WorkplaceData;
        import ru.teachbase.module.documents.model.FileItem;
        import ru.teachbase.module.documents.model.WorkplaceRenderers;
        import ru.teachbase.utils.Localizer;
        import ru.teachbase.utils.Permissions;
        import ru.teachbase.utils.shortcuts.*;

        private var _listener:RTMPListener;

        private var _settings:Vector.<SettingsItem> = new Vector.<SettingsItem>();

        private var _initialized:Boolean = false;


        //-------------------------- initialize -------------------------------//

        protected function creationCompleteHandler(event:Event = null):void {

            _listener = new RTMPListener(PacketType.WORKPLACE + "::" + this.instanceID,true);

            _listener.addEventListener(RTMPEvent.DATA, handleMessage);

            rtmp_history(PacketType.WORKPLACE + "::" + this.instanceID, new mx.rpc.Responder(historyHandler, $null));

            _settings.push(new SettingsItem("clear_workplace", SettingsItem.FUN, detachDocument));
            _settings.push(new SettingsItem("save_screenshot", SettingsItem.FUN, container.takeSnapshot))

            permissions = App.user ? App.user.permissions : 0;
        }


        //---------------------------- API ------------------------------------//


        public function attachDocument(doc:DocumentData) {
            if(!doc) return;

            currentState = active.name;
            container.init(doc);
        }


        public function detachDocument() {
            container.dispose();
            currentState = idle.name;
        }


        public function inProgress(id:Number) {
            currentState = progress.name;
            if (App.meeting.usersByID[id]) progressText.text = translate("progress", "docs", (App.meeting.usersByID[id] as User).fullName);
        }


        //------------------------ private -------------------------//

        private function processData(data:WorkplaceData):void {


            if (data.type == "idle" && currentState != idle.name) {
                detachDocument();
            }

            if (data.type == "progress") {
                inProgress(data.id);
            }


            if (data.type == "active") {
                (currentState == active.name) && detachDocument();
                attachDocument(data.data);
            }

        }


        // ----------------------- handlers -----------------------//

        private function historyHandler(data:WorkplaceData):void {

            data && processData(data);

            _listener.readyToReceive = true;
            _initialized = true;
        }


        private function handleMessage(e:RTMPEvent):void {
            const data:WorkplaceData = e.packet.data as WorkplaceData;

            if (!data) return;

            processData(data);
        }


        private function loadDocument(evt:Event):void {

            //todo: open select window

        }


        protected function wbHandler(event:MouseEvent):void {
            rtmp_call("create_document", null, "wb", this.instanceID);
        }


        /*private function convertFromLibrary(item:FileItem):void {
         _fm = m(FileManager) as FileManager;

         setFileListeners(_fm);

         currentState = loading.name;

         _fm.convert(item);


         }


         private function convertFromGoogle(item:FileItem):void {
         _fm = m(FileManager) as FileManager;

         setFileListeners(_fm);

         currentState = loading.name;

         //	_docTrait.output({type:"loading",id:App.room.user.sid},Recipients.ALL_EXCLUDE_ME);

         _fm.grabImage(item);


         }


         public function onStartLoad(event:Event = null):void {

         _fm = m(FileManager) as FileManager;

         setFileListeners(_fm);

         currentState = loading.name;

         _docTrait.output({type: "loading", id: App.room.user.sid}, Recipients.ALL_EXCLUDE_ME);

         _fm.upload_convert();
         }
         */

        /* private function onFileDropped(event:FileDropEvent):void {

         _fm = m(FileManager) as FileManager;

         setFileListeners(_fm);

         currentState = loading.name;

         _docTrait.output({type: "loading", id: App.room.user.sid}, Recipients.ALL_EXCLUDE_ME);

         _fm.upload_file(event.file);
         } */
        /*
         private function setFileListeners(fm:FileManager):void {
         fm.addEventListener(FileStatusEvent.COMPLETE, onFileReady);
         //fm.addEventListener(FileStatusEvent.PROGRESS, onFileProgress);
         fm.addEventListener(ErrorEvent.ERROR, onFileError);
         fm.addEventListener(FileStatusEvent.CANCEL, onFileCancel);
         fm.addEventListener(FileStatusEvent.SELECTED, fileSelected)
         }


         private function removeFileListeners(fm:FileManager):void {
         fm.removeEventListener(FileStatusEvent.COMPLETE, onFileReady);
         //fm.removeEventListener(FileStatusEvent.PROGRESS, onFileProgress);
         fm.removeEventListener(ErrorEvent.ERROR, onFileError);
         fm.removeEventListener(FileStatusEvent.CANCEL, onFileCancel);
         fm.removeEventListener(FileStatusEvent.SELECTED, fileSelected)
         }

         private function fileSelected(evt:Event):void {
         if (_panel) Core.removePopupFromTop(_panel);
         }

         private function onFileCancel(event:FileStatusEvent):void {
         removeFileListeners(_fm);
         currentState = idle.name;
         _docTrait.output({type: "idle", id: App.room.user.sid}, Recipients.ALL_EXCLUDE_ME);
         }

         private function onFileReady(event:FileStatusEvent):void {


         _docTrait.output({url: event.value.url, type: "load", dataType: event.value.type, title: _fm.filename, id: this.instanceID}, Recipients.ALL);//_EXCLUDE_ME);

         //(ownerModule as DocumentsModule).registerNewDoc(this.instanceID,_fm.filename);

         currentState = loading.name;

         removeFileListeners(_fm);
         //		loadConfigXML(event.value);

         }    */


        //private function onFileProgress(event:FileStatusEvent):void{
        ///progressText.text = "loading " + event.value;
        //progressBar.progress = Number(event.value/100);
        //}

        /*
         private function onFileError(event:ErrorEvent):void {

         Logger.log(event.text, "file");

         removeFileListeners(_fm);
         _docTrait.output({type: "idle", id: App.room.user.sid}, Recipients.ALL_EXCLUDE_ME);
         currentState = idle.name;
         }
         */

        override public function hide():void {
            detachDocument();
            super.hide();
        }


        // ---------------- implement ------------------------//


        public function localize():void {

            label = translate('label', 'docs');
            progressText && (progressText.text = translate('Loading'));
            doc && (doc.label = translate('Load_files', 'docs'));
            white && (white.label = translate('Whiteboard', 'docs'));
        }


        //------------------- get/set ----------------------------//

        override public function set permissions(value:uint):void {

            const flag:Boolean = Permissions.docsAvailable(value);

            idleGroup && (idleGroup.visible = flag);
            container && (container.editable = flag);
        }


        override public function get settings():Vector.<SettingsItem> {

            return _settings;

        }
        ]]>
	</fx:Script>
    <module:states>
        <s:State id="active" name="active"/>
        <s:State id="idle" name="idle"/>
        <s:State id="progress" name="progress"/>
    </module:states>

    <com:WorkplaceContainer id="container"
                            width="{this.width}" height="{this.height}"
                            />

    <s:Label id="progressText" initialize="progressText.text=translate('Loading')" horizontalCenter="0"
             includeIn="progress" verticalCenter="-60"/>

    <s:VGroup verticalCenter="0" horizontalCenter="0" includeIn="progress">
        <s:BusyIndicator rotationInterval="50" symbolColor="0x71a7cd" width="60" height="60"/>
    </s:VGroup>

    <s:Group id="idleGroup" width="400" height="260" horizontalCenter="0" verticalCenter="0" includeIn="idle"
             visible="false">
        <s:VGroup horizontalCenter="0" top="50">
            <s:VGroup horizontalCenter="0" width="176">

                <components:CustomSkinableButton id="doc" width="176" click="loadDocument(event)"
                                                 focusSkin="{null}"
                                                 skinClass="ru.teachbase.skins.StandartButtonWithIcon"
                                                 initialize="with(doc){label=translate('Load_files','docs');iconUp=style('docs','uploadFile'); iconDown=style('docs','uploadFileDown'); iconOver=style('docs','uploadFileHover')}"
                        />
                <components:CustomSkinableButton id="white" width="176" click="wbHandler(event)" focusSkin="{null}"
                                                 skinClass="ru.teachbase.skins.StandartButtonWithIcon"
                                                 initialize="with(white){label=translate('Whiteboard','docs');iconUp=style('docs','whitebordButton');iconDown=style('docs','whitebordButtonDown');iconOver=style('docs','whitebordButtonHover')}"
                        />
            </s:VGroup>

        </s:VGroup>
    </s:Group>


</module:ModuleInstance>
