<?xml version="1.0" encoding="utf-8"?>
<renderers:DefaultRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark"
                           xmlns:renderers="ru.teachbase.module.documents.renderers.*"
                           width="100%" height="100%" clipAndEnableScrolling="true">
    <fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
        import mx.events.FlexEvent;

        import ru.teachbase.module.board.BoardCanvas;
        import ru.teachbase.utils.logger.Logger;

        private var imgLoader:Loader;
        [Bindable]
        private var _bitmap:Bitmap;
        private var padding:Number = 20;

        public var board:BoardCanvas;

        private var _initialHeight:Number = 0;

        override protected function completeHandler(event:FlexEvent):void {
            _initialWidth = 0;
            _useWB = true;
        }


        override public function resize(width:Number, height:Number):void {
            super.resize(width, height);
            if (isNaN(_ratio)) {
                return;
            }
            /*	if (width > _initialWidth)
             width = _initialWidth;
             if (height > _initialHeight)
             height = _initialHeight;
             */
            var thisRatio:Number = width / height;
            if (thisRatio > _ratio) {
                if (height <= _initialHeight)
                    imageContainer.height = height - padding * 2;
                else
                    imageContainer.height = _initialHeight - padding * 2;
                imageContainer.width = imageContainer.height * _ratio;
            } else {
                if (width <= _initialWidth)
                    imageContainer.width = width - padding * 2;
                else
                    imageContainer.width = _initialWidth - padding * 2;
                imageContainer.height = imageContainer.width / _ratio;
            }
            imageContainer.x = (width - imageContainer.width) / 2;
            imageContainer.y = (height - imageContainer.height) / 2;
        }

        override public function set data(value:Object):void {
            const xml:XML = value as XML;
            this.imageUrl = xml.items.item[0].@slideurl.toString();
        }

        public function set imageUrl(value:String):void {
            if (busyIndicator)
                busyIndicator.visible = false;

            imgLoader = new Loader();
            var context:LoaderContext = new LoaderContext(true, ApplicationDomain.currentDomain);
            if (Security.sandboxType != Security.LOCAL_TRUSTED && Security.sandboxType != Security.APPLICATION) context.securityDomain = SecurityDomain.currentDomain;

            var req:URLRequest = new URLRequest(value);
            imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImgLoaded);
            imgLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function (e:*):void {
       //         Logger.log("IO_ERROR error caught  ", "img");

            });
            imgLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function (e:*):void {
  //              Logger.log("SECURITY_ERROR error caught ", "img");

            });


            imgLoader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, function (e:HTTPStatusEvent):void {
    //            Logger.log("HTTP_STATUS: " + e.status.toString(), 'img');
            });

            try {
                imgLoader.load(req, context);
            } catch (evt:*) {
//                Logger.log("can't loading img", "img");
            }
        }

        //container

        private function onImgLoaded(evt:Event):void {
            busyIndicator.visible = false;
            var btm:Bitmap = imgLoader.content as Bitmap;
            if (!btm) {
      //          Logger.log('no bitmap in image', 'img');
                return;
            }
            _bitmap = btm;
            _ratio = btm.width / btm.height;

            _initialWidth = btm.width;
            _initialHeight = btm.height;

            inited = true;

            resize(this.width, this.height);
        }
        ]]>
	</fx:Script>
	<s:BitmapImage source="{_bitmap}" id="imageContainer" smooth="true"/>
	<s:Group verticalCenter="0" horizontalCenter="0" id="busyIndicator">
		<s:BusyIndicator rotationInterval="50" symbolColor="0x71a7cd" width="60" height="60"/>
	</s:Group>
</renderers:DefaultRenderer>
