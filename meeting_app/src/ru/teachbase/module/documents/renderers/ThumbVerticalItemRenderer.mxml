<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" 
				height="48" width="34" 
				click="onItemClick(event)" 
				mouseOver="onMouseOver(event)"
				implements="ru.teachbase.module.documents.components.IThumbRenderer"
				mouseOut="onMouseOut(event); clearBorder()"
				contentBackgroundAlpha="0">
	
	<fx:Script>
		<![CDATA[
        import caurina.transitions.Tweener;

        import ru.teachbase.module.documents.events.ControlEvent;
        import ru.teachbase.module.documents.model.SlideAsset;
        import ru.teachbase.module.documents.model.WorkplaceMethod;
        import ru.teachbase.utils.logger.Logger;
        import ru.teachbase.utils.workplace.ControlHost;

        import spark.filters.GlowFilter;

        private var _loader:Loader;
        private var _urlRequest:URLRequest;
        public var handler:Function;
        private var _itemId:int;
        public var lodedHandler:Function;

        private const filter:GlowFilter = new GlowFilter(0x000000, 1, 2, 2, 1000);

        override public function set data(value:Object):void {
            super.data = value;
            if (data == null) {
                return
            }
            ;
            _itemId = int(value.id);
            slideNumber.text = String(int(value.id) + 1);
            _loader = new Loader()
            _urlRequest = new URLRequest(value.thumbURL);
            handler(this);
        }

        private function drewRect(value:Boolean):void {
            if (value)
                thumbImage.filters = [filter];
            else
                thumbImage.filters = [];
        }

        public function load():void {
            _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoadingConplete)
            _loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function (e:*):void {
                lodedHandler();
            });
            _loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function (e:*):void {
                lodedHandler();
            });
            try {
                _loader.load(_urlRequest);
            } catch (e:*) {
                lodedHandler();
            }
        }

        public function imageLoadingConplete(evt:Event):void {
            var bitmap:Bitmap = _loader.content as Bitmap;
            bitmap.width = 27;
            bitmap.height = 39;
            bitmap.x = 3;
            bitmap.y = 4;
            bitmap.smoothing = true;
            thumbImage.addChild(bitmap);
            lodedHandler();
        }

        private function get resizebleElement():DisplayObject {
            if (thumbImage.numChildren > 0)
                return thumbImage.getChildAt(0);
            else
                return null;
        }

        private function onItemClick(evt:Event):void {
            dispatchEvent(new ControlEvent(ControlEvent.CHANGE, WorkplaceMethod.CHANGE_SLIDE, [(data as SlideAsset).id], true, ControlHost.BOTH, true));
        }

        private function onMouseOver(evt:Event):void {
            Tweener.addTween(resizebleElement, {x: 1, time: 0.3, transition: "linear"});
            Tweener.addTween(resizebleElement, {y: 1, time: 0.3, transition: "linear", onComplete: drawBorder});

            Tweener.addTween(resizebleElement, {width: 33, time: 0.3, transition: "linear"});
            Tweener.addTween(resizebleElement, {height: 47, time: 0.3, transition: "linear"});

            Tweener.addTween(slideNumber, {x: 3, time: 0.3, transition: "linear"});
            Tweener.addTween(slideNumber, {y: 2, time: 0.3, transition: "linear"});
        }

        private function onMouseOut(evt:Event):void {
            Tweener.addTween(resizebleElement, {x: 3, time: 0.3, transition: "linear"});
            Tweener.addTween(resizebleElement, {y: 4, time: 0.3, transition: "linear"});

            Tweener.addTween(resizebleElement, {width: 27, time: 0.3, transition: "linear"});
            Tweener.addTween(resizebleElement, {height: 39, time: 0.3, transition: "linear"});

            Tweener.addTween(slideNumber, {x: 6, time: 0.3, transition: "linear"});
            Tweener.addTween(slideNumber, {y: 6, time: 0.3, transition: "linear"});
        }

        private function drawBorder():void {
            if (thumbImage)
                thumbImage.filters = [filter];
        }

        private function clearBorder():void {
            if (thumbImage)
                thumbImage.filters = [];
        }

        public function get itemId():int {
            return _itemId;
        }

        public function set itemId(value:int):void {
            _itemId = value;
        }
        ]]>
	</fx:Script>
	
	<mx:UIComponent id="thumbImage" width="100%" height="100%" left="0"/>
	<s:Label id="slideNumber" x="6" y="6" width="30" fontSize="10" color="0x000000"/>
	
</s:ItemRenderer>
