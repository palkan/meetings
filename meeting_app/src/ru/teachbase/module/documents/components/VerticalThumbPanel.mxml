<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:components="ru.teachbase.components.*"
         addedToStage="onInit()"
         width="43" height="100%">
    <fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
        import caurina.transitions.Tweener;

        import mx.collections.ArrayList;

        import ru.teachbase.module.documents.renderers.ThumbVerticalItemRenderer;
        import ru.teachbase.utils.helpers.*;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.style;
        import ru.teachbase.utils.shortcuts.translate;

        private var _timer:Timer = new Timer(100, 0);
        private var _renderersList:Vector.<IThumbRenderer> = new Vector.<IThumbRenderer>();
        private var _loadingTimer:Timer = new Timer(1000, 1);
        private var _lastLoadedSlide:int;
        private var _isHide:Boolean;

        [Bindable]
        private var _dataProvider:ArrayList;


        private function onInit():void {

            _timer.addEventListener(TimerEvent.TIMER, onTimer, false, 0, true);
            _timer.start();

            var _classFactory:ClassFactory = new ClassFactory(ThumbVerticalItemRenderer);
            _classFactory.properties = { handler: rendererInited, lodedHandler: lodedHandler};

            thumbList.itemRenderer = _classFactory;
        }

        private function onTimer(evt:Event):void {
            if (this.mouseY < 0 || this.mouseX < 0 || this.mouseX > this.width || this.mouseY > this.height) {
                return;
            }

            if (this.mouseY > 0 && this.mouseY < 120) {
                moveTop((120 - mouseY));
            } else if (this.mouseY > this.height - 120 && this.mouseY < this.height) {
                moveBottom(120 - (this.height - mouseY));
            }
        }

        private function moveTop(speed:Number):void {
            thumbList.layout.verticalScrollPosition -= speed / 2 >= thumbList.layout.verticalScrollPosition ? thumbList.layout.verticalScrollPosition : speed / 2;
        }

        private function moveBottom(speed:Number):void {

            if (thumbList.measuredHeight < this.height) {
                return;
            }
            if (speed / 2 >= thumbList.measuredHeight - thumbList.layout.verticalScrollPosition - this.height + 12) {
                thumbList.layout.verticalScrollPosition = thumbList.measuredHeight - this.height + 12;
                return;
            } else if (thumbList.layout.verticalScrollPosition < thumbList.measuredHeight - this.height + 12) {
                thumbList.layout.verticalScrollPosition += speed / 2;
            }
        }

        public function rendererInited(par:IThumbRenderer):void {

            _renderersList.push(par);

            if (par.itemId == 0) {
                par.load();
                _loadingTimer.start();
            }
        }

        private function lodedHandler(par:Event = null):void {
            _loadingTimer.reset();
            _lastLoadedSlide++;

            if (_lastLoadedSlide >= _renderersList.length) {
                return;
            }
            if (_renderersList[_lastLoadedSlide]) {
                _renderersList[_lastLoadedSlide].load();
                _loadingTimer.start();
            } else {
                _loadingTimer.stop();
                _loadingTimer.removeEventListener(TimerEvent.TIMER, lodedHandler);
            }
        }

        private function onHideButtonClick(evt:Event):void {
            if (_isHide) {
                hideButton.toolTip = translate('hide');
                Tweener.addTween(mainGroup, {x: mainGroup.x - 43, time: 0.3, transition: "linear"});
            } else {
                hideButton.toolTip = translate('show');
                Tweener.addTween(mainGroup, {x: mainGroup.x + 43, time: 0.3, transition: "linear"});
            }
            _isHide = !_isHide;
        }

        public function set dataProvider(value:ArrayList):void {
            _dataProvider = value;
        }

        public function dispose():void {
            _dataProvider = null;
            _timer.stop();
            _timer.removeEventListener(TimerEvent.TIMER, onTimer);
        }
        ]]>
	</fx:Script>
	<s:Group id="mainGroup" width="100%" height="100%">
		<components:CustomSkinableButton id="hideButton" left="-19" width="19" height="35" top="19" label="hide"  click="onHideButtonClick(event)"
										 skinClass="ru.teachbase.skins.CustomSkinableButtonSkin" focusSkin="{null}"
										 initialize="with(hideButton){toolTip=translate('hide');iconOver=ru.teachbase.utils.helpers.style('docs','leftHideButtonOver'); iconDown=ru.teachbase.utils.helpers.style('docs','leftHideButtonOver'); iconUp=ru.teachbase.utils.helpers.style('docs','leftHideButtonUp');}"
										 />
		
		<s:Image id="backgroundRectVertical" initialize="backgroundRectVertical.source=style('docs','thumbListBg')"  scaleMode="stretch" height="100%" width="43" left="0" top="0" bottom="0"/>
		
		<s:List id="thumbList" borderVisible="false" left="5" right="5"			
				height="100%" width="100%"
				useVirtualLayout="false" 
				dataProvider="{_dataProvider}"
				contentBackgroundAlpha="0" horizontalCenter="0" verticalCenter="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
		</s:List>
	</s:Group>
</s:Group>
