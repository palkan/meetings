<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         clipAndEnableScrolling="true" resize="resizeHandler(event)"
        >
	<fx:Script>
		<![CDATA[
        import caurina.transitions.Tweener;

        import mx.events.ResizeEvent;
        import mx.graphics.ImageSnapshot;

        import ru.teachbase.components.board.BoardContent;
        import ru.teachbase.components.board.BoardExternalManager;
        import ru.teachbase.components.board.WBControlbar;
        import ru.teachbase.constants.PacketType;
        import ru.teachbase.manage.rtmp.RTMPListener;
        import ru.teachbase.manage.rtmp.events.RTMPEvent;
        import ru.teachbase.manage.rtmp.model.Recipients;
        import ru.teachbase.module.documents.events.ControlEvent;
        import ru.teachbase.module.documents.events.DocEvent;
        import ru.teachbase.module.documents.events.RendererEvent;
        import ru.teachbase.module.documents.model.DocumentData;
        import ru.teachbase.module.documents.model.WorkplaceData;
        import ru.teachbase.module.documents.model.WorkplaceMethod;
        import ru.teachbase.module.documents.model.WorkplaceRenderers;
        import ru.teachbase.module.documents.renderers.IWorkplaceRenderer;
        import ru.teachbase.utils.LocalFile;
        import ru.teachbase.utils.shortcuts.rtmp_send;
        import ru.teachbase.utils.workplace.ControlHost;

        private var _renderer:IWorkplaceRenderer;

        private var _listener:RTMPListener;

        private var _editable:Boolean;

        private var _documentId:int;


        /* transformation const */
        private const scaleIn:Number = 2;
        private const scaleOut:Number = 1 / scaleIn;

        private const maxScale:int = 4;
        private const minScale:Number = 1 / maxScale;

        private var _board:BoardContent;

        private var _board_mgr:BoardExternalManager;

        //------------------ API -----------------------//


        /**
         *
         * Initialize new document
         *
         * @param data
         */

        public function init(data:DocumentData):void {

            var clazz:Class = WorkplaceRenderers.getClassById(data.type);

            if (!clazz) return;

            _renderer = new clazz();

            _documentId = data.id;

            _renderer.data = data.data;

            _renderer.editable = _editable;
            _renderer.setLayoutBoundsPosition(20, 20);
            _renderer.addEventListener(RendererEvent.INITIALIZED, rendererInitializedHandler);
            content.addElementAt(_renderer,0);
        }

        /**
         * Clear container
         */

        public function dispose():void {

            _renderer && _renderer.dispose();
            _board && _board.dispose();
            _board_mgr && _board_mgr.dispose();

            _renderer = null;
            _board = null;
            _board_mgr = null;

            content.removeAllElements();
            controls.removeAllElements();

            this.removeEventListener(ControlEvent.CHANGE, changeHandler);
            _listener && _listener.removeEventListener(RTMPEvent.DATA, handleMessage);

        }

        private function addControlsListener():void {
            this.addEventListener(ControlEvent.CHANGE, changeHandler);
        }


        protected function zoomIn(event:MouseEvent = null):void {
            var _m:Matrix = content.transform.matrix.clone();
            _m.scale(scaleIn, scaleIn);
            _m.translate((content.width / 2) * (1 - scaleIn), (content.height / 2) * (1 - scaleIn));

            content.transform.matrix = _m;
            _board && (_board.transform.matrix = _m);
        }


        protected function zoomOut(event:MouseEvent = null):void {

            var _m:Matrix = content.transform.matrix.clone();
            _m.scale(scaleOut, scaleOut);
            _m.translate((content.width / 2) * (1 - scaleOut), (content.height / 2) * (1 - scaleOut));

            if (_m.a == 1)
                _m.tx = _m.ty = 0;

            content.transform.matrix = _m;
            _board && (_board.transform.matrix = _m);
        }


        protected function rotateCW(event:MouseEvent = null):void {

            var _m:Matrix = content.transform.matrix.clone();
            _m.rotate(Math.PI / 2);
            _m.translate((content.height + content.width) / 2, (content.height - content.width) / 2);
            content.transform.matrix = _m;
            _board && (_board.transform.matrix = _m);
        }

        protected function rotateCCW(event:MouseEvent = null):void {
            var _m:Matrix = content.transform.matrix.clone();
            _m.rotate(-Math.PI / 2);
            _m.translate((content.width - content.height) / 2, (content.height + content.width) / 2);
            content.transform.matrix = _m;
            _board && (_board.transform.matrix = _m);
        }


        private function dispatchToServer(event:ControlEvent):void {
            rtmp_send(PacketType.DOCUMENT + "::" + _documentId, {type: "change", method: event.method, data: event.args, host: event.handler}, Recipients.ALL_EXCLUDE_ME);
        }


        public function takeSnapshot():void {
            controls.visible = false;
            var _imgSnap:ImageSnapshot = ImageSnapshot.captureImage(this, 0);
            LocalFile.save(_imgSnap.data, "snapshot.png");
            controls.visible = true;
        }


        /* control methods: make them public! */

        public function zoom(flag:Boolean):void {
            if (flag)
                (content.scaleX < maxScale) && zoomIn();
            else
                (content.scaleX > minScale) && zoomOut();
        }

        public function rotate(flag:Boolean):void {
            if (flag)
                rotateCW();
            else
                rotateCCW();
        }

        public function goToSlide(id:int):void {
            _board && _board.gotoPage(id);
        }


        public function moveDoc(posX:Number, posY:Number):void {
            var p:Point = new Point(posX * _renderer.width, posY * _renderer.height);
            var newP:Point = content.transform.matrix.deltaTransformPoint(p);
            Tweener.addTween(content, {x: newP.x, y: newP.y, time: .15, transition: "linear"});
        }


        private function attachWhiteboard():void {

            _board = new BoardContent();
            _board.resize(content.width-40,content.height-40);
            _board.x = 20;
            _board.y = 20;

            _board.canvas.backgroundAlpha = 0;

            var controlbar:WBControlbar = new WBControlbar();
            _board.controlbar = controlbar;
            controls.addElement(controlbar);

            _board_mgr = new BoardExternalManager(_documentId);

            _board.manager.setExternal(_board_mgr);

            _board.canvas.ratio = _renderer.ratio;
            _board.canvas.maxCanvasWidth = _renderer.initialWidth;

            if (_renderer.data.slide)
                _board.gotoPage(_renderer.data.slide);

            content.addElement(_board);
        }


        /* handlers */


        private function callHostFunction(host:Object, method:String, args:Array = null, n:int = 1):void {

            if (!host.hasOwnProperty(method))
                return;
            do {
                if (args)
                    host[method].apply(null, args);
                else
                    host[method]();
                n--;
            } while (n > 0);
        }


        protected function resizeHandler(event:ResizeEvent = null):void {
            content.width = controls.width = this.width;
            content.height = controls.height = this.height;

            if (event) {
                var realDeltaScaled:Point = new Point();
                realDeltaScaled.x = (content.x - (event.oldWidth * (1 - content.scaleX)) / 2);
                realDeltaScaled.y = (content.y - (event.oldHeight * (1 - content.scaleY)) / 2);

                content.x = realDeltaScaled.x + (width - content.width * content.scaleX) / 2;
                content.y = realDeltaScaled.y + (height - content.height * content.scaleY) / 2;
            }

            _renderer && _renderer.resize(content.width - 40, content.height - 40);
            _board && _board.resize(content.width-40,content.height-40);
        }


        public function changeHandler(event:ControlEvent):void {

            ControlHost.isContainer(event.handler) && callHostFunction(this, event.method, event.args);

            ControlHost.isRenderer(event.handler) && callHostFunction(_renderer, event.method, event.args);

            event.callServer && dispatchToServer(event);

        }

        protected function handleMessage(event:RTMPEvent):void {
            const data:WorkplaceData = event.packet.data as WorkplaceData;
            changeHandler(new ControlEvent(ControlEvent.CHANGE, data.method, data.data as Array, false, data.host));
        }

        private function rendererInitializedHandler(e:RendererEvent):void {

            _renderer.data.rotation && callHostFunction(this, WorkplaceMethod.ROTATE, [_renderer.data.rotation > 0], Math.abs(_renderer.data.rotation));
            _renderer.data.rotation && callHostFunction(_renderer, WorkplaceMethod.ROTATE, [_renderer.data.rotation > 0], Math.abs(_renderer.data.rotation));
            _renderer.data.slide && callHostFunction(_renderer, WorkplaceMethod.CHANGE_SLIDE, [_renderer.data.slide]);

            _renderer.initParent(content);
            _renderer.useWB && attachWhiteboard();
            _renderer.hasControls && _renderer.initControls(controls) && addControlsListener();
            _renderer.removeEventListener(RendererEvent.INITIALIZED, rendererInitializedHandler);

            _listener = new RTMPListener(PacketType.DOCUMENT + "::" + _documentId, true);
            _listener.addEventListener(RTMPEvent.DATA, handleMessage);

            resizeHandler();
        }

        //-------------- get/set ----------------------//

        public function get renderer():IWorkplaceRenderer {
            return _renderer;
        }

        public function get editable():Boolean {
            return _editable;
        }

        public function set editable(value:Boolean):void {
            _editable = value;
            _renderer && (_renderer.editable = value);

            _board && (_board.editable = value);
        }

        public function get documentId():int {
            return _documentId;
        }
        ]]>

	</fx:Script>
	
	<!-- content -->
	<s:Group id="content" mouseEnabled="false"/>
	<!-- controls -->
	<s:Group id="controls"/>
</s:Group>
