package ru.teachbase.manage{import flash.utils.Dictionary;import mx.collections.ArrayCollection;import mx.core.IVisualElementContainer;import mx.rpc.Responder;import ru.teachbase.layout.LayoutElementData;import ru.teachbase.model.ModulesToInit;import ru.teachbase.model.constants.Recipients;import ru.teachbase.module.base.IModule;import ru.teachbase.module.base.IModuleContent;import ru.teachbase.module.base.IModulePanel;import ru.teachbase.traits.LayoutTrait;/**	 * @author Teachbase (created: Feb 27, 2012)	 */	public class LayoutManager extends Manager	{			/**		 * key:ID , value:IModule		 * key:IModule , value:ID		 */				public const modules:Dictionary = new Dictionary(true);				public const modulesCollection:ArrayCollection = new ArrayCollection();				public var moduleContainer:IVisualElementContainer;				private const _instancesForLayoutInitialize:Vector.<ModulesToInit> = new Vector.<ModulesToInit>();				protected const trait:LayoutTrait = TraitManager.instance.createTrait(LayoutTrait) as LayoutTrait;				protected var _controller:LayoutControllerBase;				//------------ constructor ------------//				public function LayoutManager(...deps:Array)		{			super(deps);		}				//------------ initialize ------------//				/**		 * 1. Build defaults;		 * <br/>		 * 2. Load external layouts;		 * <br/>		 * 3. Make active last used layout;		 * <br/>		 */				override protected function initialize():void		{			if(initialized)				return;						new LayoutElementData();						_controller = new LayoutControllerBase(this);						_controller.trait = trait;			trait.initialize();			trait.call("get_history", new Responder(onDefaultLayout, null), "layout");		}				//--------------- ctrl ---------------//				public function getInstanceForLayout(mod:String, instance:int):IModuleContent		{			const module:IModule = getModule(mod);			const result:IModuleContent = module ? module.getVisual(instance) : null;			return result;		}				public function clearInstancesForLayoutInitialize():void		{			_instancesForLayoutInitialize.length = 0;		}				//------------ get / set -------------//				public function get instancesForLayoutInitialize():Vector.<ModulesToInit>		{			return _instancesForLayoutInitialize;		}				public function get controller():LayoutControllerBase		{			return _controller;		}						public function restartPanelContent(id:int, newID:int = 0):void{			var _panel:IModulePanel = _controller.getModuleById(id) as IModulePanel;						if(_panel && _panel.currentContent){				var	_data:LayoutElementData = new LayoutElementData(100,100,id,false,0,[{module:_panel.currentContent.ownerModule.moduleID,id:newID}]);				trait.output({type:"restart",from:id, to:newID, data:_data},Recipients.ALL);							}		}								public function initializeModule(module:IModule):void		{			// existing:			if(modules[module])				return;						// register:			modules[module.moduleID] = module;			modules[module] = module.moduleID;						// init:			module.initializeModule(this);						if(module.icon)			{				modulesCollection.addItem(module);			}		}						//--------------- ctrl ---------------//				public function getModule(id:String):IModule		{			if(!exists(id))				return null;						return modules[id];		}				private function exists(id:String):Boolean		{			return modules[id];		}				//------- handlers / callbacks -------//				protected function onDefaultLayout(v:Array):void		{								var fun:Function = function(obj:Object,index:uint = 0, arr:Array = null):Object{				var content:IModuleContent = getInstanceForLayout(obj["module"],obj["id"]);				content && (content.panelID = (this as LayoutElementData).id);				return content;			};						for each(var el:LayoutElementData in v)			{				if(el.id!=0 && el.content){					var modules:Array = el.content.map(fun,el);					el.content = modules;					_instancesForLayoutInitialize.push(new ModulesToInit(modules,el.id));				}			}						_controller.preinit(v);			_initialized = true;		}	}}