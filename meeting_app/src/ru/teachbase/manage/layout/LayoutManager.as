package ru.teachbase.manage.layout {import mx.modules.ModuleManager;import mx.rpc.Responder;import ru.teachbase.constants.PacketType;import ru.teachbase.layout.LayoutController;import ru.teachbase.layout.model.ITreeLayoutElement;import ru.teachbase.layout.model.LayoutElementData;import ru.teachbase.manage.*;import ru.teachbase.manage.layout.events.LayoutEvent;import ru.teachbase.manage.layout.model.LayoutChangeData;import ru.teachbase.manage.modules.model.IModuleContainer;import ru.teachbase.manage.modules.model.IModulePanel;import ru.teachbase.manage.rtmp.RTMPListener;import ru.teachbase.manage.rtmp.events.RTMPEvent;import ru.teachbase.manage.rtmp.model.Recipients;import ru.teachbase.tb_internal;import ru.teachbase.utils.shortcuts.rtmp_call;import ru.teachbase.utils.shortcuts.rtmp_history;import ru.teachbase.utils.shortcuts.rtmp_send;import ru.teachbase.utils.shortcuts.warning;use namespace tb_internal;/** * @author Teachbase (created: Feb 27, 2012) */public class LayoutManager extends Manager {    protected var _controller:LayoutController;    private const _listener:RTMPListener = new RTMPListener(PacketType.LAYOUT);    private var _container:IModuleContainer;    //------------ constructor ------------//    public function LayoutManager(registered:Boolean = false) {        super(registered,[ModuleManager]);    }    //------------ initialize ------------//    /**     * 1. Build defaults;     * <br/>     * 2. Load external layouts;     * <br/>     * 3. Make active last used layout;     * <br/>     */    override protected function initialize():void {        if (initialized)            return;        new LayoutElementData();        _controller = new LayoutController();        _listener.initialize();        _listener.addEventListener(RTMPEvent.DATA, handleMessage);        rtmp_history("layout", new Responder(handleHistory, function (...args):void {            _failed = true;        }));    }    //--------------- API ----------------//    /**     *     * Set IModuleContainer associated with manager     *     * @param main Main modules container (sub-container)     * @param elements Elements container     */    public function setContainers(main:IModuleContainer,elements:ITreeLayoutElement):void{        _container = main;        // elements container is the element with elementId = 0 (used when we add elements to outer container)        _controller.initElement(elements);    }    /**     *     * Lock layout (only if I am current layout)     *     */    public function lock():void{        rtmp_call("layout_lock", new Responder(success,failure));        function success(...args):void{            //TODO: lock layout            _container.lock();        }        function failure(...args):void{            warning('failed to lock layout! Is it possible?');        }    }    /**     *     * Try to unlock layout; if server response with success - layout is unlocked     *     */    public function unlock():void{        rtmp_call("layout_unlock", new Responder(success,failure));        function success(...args):void{            //TODO: unlock layout            _container.unlock();        }        function failure(...args):void{            warning('failed to unlock layout');        }    }    override public function dispose():void{        //TODO:    }    //------- handlers / callbacks -------//    protected function handleHistory(v:Array):void {        _controller.preinit(v);        _controller.addEventListener(LayoutEvent.CHANGE, localChangesHandler);        _initialized = true;    }    //------------- get/set --------------//    public function get controller():LayoutController {        return _controller;    }    protected function localChangesHandler(e:LayoutEvent):void {        rtmp_send(PacketType.LAYOUT, e.data, Recipients.ALL_EXCLUDE_ME);    }    protected function handleMessage(e:RTMPEvent):void {        var data:LayoutChangeData = e.packet.data as LayoutChangeData;        if(!data) return;        switch(data.type){            case "move":                _controller.tb_internal::move(data.from,data.to,data.l,data.i);                break;            case "resize":                _controller.resizeGroup(data.key, data.d, false);                break;            case "add":                 if(!_container) return;                var panel:IModulePanel = _container.createPanel(data.from);                _controller.tb_internal::add(panel.elementId,data.to,data.l,data.i);                break;            case "remove":                _controller.tb_internal::removeByID(data.from);                break;            case "lock":                   //TODO            default:                break;        }    }    public function get container():IModuleContainer {        return _container;    }}}