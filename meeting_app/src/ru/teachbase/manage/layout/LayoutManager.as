package ru.teachbase.manage.layout {import mx.modules.ModuleManager;import mx.rpc.Responder;import ru.teachbase.constants.PacketType;import ru.teachbase.layout.LayoutController;import ru.teachbase.layout.model.ITreeLayoutElement;import ru.teachbase.layout.model.LayoutElementData;import ru.teachbase.manage.*;import ru.teachbase.manage.layout.events.LayoutEvent;import ru.teachbase.manage.layout.model.LayoutChangeData;import ru.teachbase.manage.modules.ModulesManager;import ru.teachbase.manage.modules.model.IModuleContainer;import ru.teachbase.manage.modules.model.IModulePanel;import ru.teachbase.manage.rtmp.RTMPListener;import ru.teachbase.manage.rtmp.events.RTMPEvent;import ru.teachbase.manage.rtmp.model.Recipients;import ru.teachbase.model.App;import ru.teachbase.model.User;import ru.teachbase.tb_internal;import ru.teachbase.utils.helpers.getValue;import ru.teachbase.utils.helpers.isArray;import ru.teachbase.utils.shortcuts.error;import ru.teachbase.utils.shortcuts.rtmp_call;import ru.teachbase.utils.shortcuts.rtmp_history;import ru.teachbase.utils.shortcuts.rtmp_send;import ru.teachbase.utils.shortcuts.warning;import spark.skins.spark.ImageLoadingSkin;use namespace tb_internal;/** * @author Teachbase (created: Feb 27, 2012) */public class LayoutManager extends Manager {    protected var _controller:LayoutController;    private const _listener:RTMPListener = new RTMPListener(PacketType.LAYOUT);    private var _container:IModuleContainer;    private var _layout_owner:User;    private var _is_owner:Boolean = false;    private var _panel_ids:Array;    //------------ constructor ------------//    public function LayoutManager(registered:Boolean = false) {        super(registered,[ModulesManager]);    }    //------------ initialize ------------//    /**     * 1. Build defaults;     * <br/>     * 2. Load external layouts;     * <br/>     * 3. Make active last used layout;     * <br/>     */    override protected function initialize():void {        if (initialized)            return;        new LayoutElementData();        new LayoutChangeData();        _controller = new LayoutController();        _listener.initialize();        _listener.addEventListener(RTMPEvent.DATA, handleMessage);        rtmp_history(PacketType.LAYOUT, new Responder(handleHistory, function (...args):void {            error("Layout history load failed");            _failed = true;        }));    }    //--------------- API ----------------//    /**     *     * Set IModuleContainer associated with manager     *     * @param main Main modules container (sub-container)     * @param elements Elements container     */    public function setContainers(main:IModuleContainer,elements:ITreeLayoutElement):void{        _container = main;        // elements container is the element with elementId = 0 (used when we add elements to outer container)        _controller.initElement(elements);    }    /**     *     * Lock layout (only if I am current layout)     *     */    public function lock():void{        rtmp_call("lock_layout", new Responder(success,failure), App.user.sid);        function success(flag:Boolean):void{           !flag && warning('layout is already locked');            _is_owner = false;        }        function failure(...args):void{            warning('failed to lock layout! Is it possible?');        }    }    /**     *     * Try to unlock layout; if server response with success - layout is unlocked     *     */    public function unlock():void{        rtmp_call("unlock_layout", new Responder(success,failure), App.user.sid);        function success(flag:Boolean):void{            !flag && warning('layout is already unlocked');            flag && (_is_owner = true);        }        function failure(...args):void{            warning('failed to unlock layout');        }    }    /**     *     * Switch layout to predefined one.     *     * @param to  Layout index     */    public function switchLayout(to:uint):void{        _is_owner && rtmp_call("layout_switch",null,to);    }    /**     *     * Commit 'add_element' data on server (where panel_id is set and 'layout' message is broadcast)     *     * @param where  Target panel id or 0 if 'add_above'     * @param index  0 or 1     * @param direction 0 or 1     *     */    public function commitAddElement(where:uint, index:uint, direction:uint):void{        _is_owner && rtmp_call("layout_add_panel", null, where, index, direction);    }    /**     *     * Commit 'remove_element' data on server     *     * @param where  Target panel id     *     */    public function commitRemoveElement(what:uint):void{        _is_owner && rtmp_send(PacketType.LAYOUT, new LayoutChangeData({type:"remove",from:what}), Recipients.ALL);    }    /**     *     * Get current (on stage) panels ids     *     */    public function get panel_ids():Array{        return _panel_ids;    }    override public function dispose():void{        if(_disposed) return;        _listener.dispose();        super.dispose();    }    //------- handlers / callbacks -------//    protected function handleHistory(history:Object):void {        const owner_id = getValue(history,"layout_owner_id",null);        if(owner_id && App.meeting.usersByID[owner_id]){            _layout_owner = App.meeting.usersByID[owner_id];        }        _controller.preinit(getValue(history,"elements",[],isArray));        _panel_ids = getValue(history,"panel_ids",[],isArray);        _controller.addEventListener(LayoutEvent.CHANGE, localChangesHandler);        _listener.readyToReceive = true;        _initialized = true;    }    protected function switchHandler(state:Object):void{        var oldElements:Object = _controller.model.elements;        _controller.preinit(getValue(state,"elements",[],isArray));        var panel_ids:Array = getValue(state,"panel_ids",[],isArray);        // First, create new panels is needed        const newSize:int = panel_ids.length;        var i, ind:int;        for(i = 0; i < newSize; i++ ){            ind = _panel_ids.indexOf(panel_ids[i]);            if(ind < 0){                var panel:IModulePanel = _container.createPanel(panel_ids[i]);                _controller.initElement(panel as ITreeLayoutElement);            }else{                _panel_ids.splice(ind,1);     // remove from current list 'cause we need to leave only useless panels                _controller.initElement(oldElements[panel_ids[i]]);            }        }        // Second, destroy useless panels        const size:int = _panel_ids.length;        for(i = 0; i < size; i++){            _container.destroyPanel(oldElements[_panel_ids[i]] as IModulePanel);        }        _panel_ids = panel_ids;        _controller.updateDisplayList();    }    protected function localChangesHandler(e:LayoutEvent):void {        rtmp_send(PacketType.LAYOUT, e.data, Recipients.ALL_EXCLUDE_ME);    }    protected function handleMessage(e:RTMPEvent):void {        var data:LayoutChangeData = e.packet.data as LayoutChangeData;        if(!data) return;        switch(data.type){            case "move":                _controller.tb_internal::move(data.from,data.to,data.l,data.i);                break;            case "resize":                _controller.resizeGroup(data.key, data.d, false);                break;            case "add":                if(!_container) return;                var panel:IModulePanel = _container.createPanel(data.from);                _controller.initElement(panel as ITreeLayoutElement);                _panel_ids.push(data.from);                _controller.tb_internal::add(panel.elementId,data.to,data.l,data.i);                break;            case "remove":                _controller.tb_internal::removeByID(data.from);                _container.destroyPanel(_controller.model.elements[data.from] as IModulePanel);                var index:int = _panel_ids.indexOf(data.from);                (index > -1) && _panel_ids.splice(index,1);                break;            case "unlock":{                if(App.meeting.usersByID[data.from]){                    _layout_owner = App.meeting.usersByID[data.from];                    if(_layout_owner.sid == App.user.sid)                        _container.unlock();                    else                        _container.lock();                    break;                }            }            case "lock":{                _layout_owner = null;                _container.lock();                break;            }            case "switch":{                rtmp_history(PacketType.LAYOUT,new Responder(switchHandler,null));                break;            }            default:                break;        }    }    //------------- get/set --------------//    public function get controller():LayoutController {        return _controller;    }    public function get container():IModuleContainer {        return _container;    }    public function get layout_owner():User {        return _layout_owner;    }    public function get is_owner():Boolean {        return _is_owner;    }}}