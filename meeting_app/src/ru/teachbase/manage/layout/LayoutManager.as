package ru.teachbase.manage.layout {import mx.rpc.Responder;import ru.teachbase.components.notifications.Notification;import ru.teachbase.constants.PacketType;import ru.teachbase.layout.LayoutController;import ru.teachbase.layout.model.ITreeLayoutElement;import ru.teachbase.layout.model.LayoutElementData;import ru.teachbase.manage.*;import ru.teachbase.manage.layout.events.LayoutEvent;import ru.teachbase.manage.layout.model.LayoutChangeData;import ru.teachbase.manage.modules.ModulesManager;import ru.teachbase.manage.modules.model.IModuleContainer;import ru.teachbase.manage.modules.model.IModulePanel;import ru.teachbase.manage.modules.model.ModuleInstanceData;import ru.teachbase.manage.rtmp.RTMPListener;import ru.teachbase.manage.rtmp.events.RTMPEvent;import ru.teachbase.manage.rtmp.model.Recipients;import ru.teachbase.model.App;import ru.teachbase.model.User;import ru.teachbase.tb_internal;import ru.teachbase.utils.helpers.getValue;import ru.teachbase.utils.helpers.isArray;import ru.teachbase.utils.shortcuts.debug;import ru.teachbase.utils.shortcuts.error;import ru.teachbase.utils.shortcuts.notify;import ru.teachbase.utils.shortcuts.rtmp_call;import ru.teachbase.utils.shortcuts.rtmp_history;import ru.teachbase.utils.shortcuts.rtmp_send;import ru.teachbase.utils.shortcuts.translate;import ru.teachbase.utils.shortcuts.warning;use namespace tb_internal;/** * @author Teachbase (created: Feb 27, 2012) */public class LayoutManager extends Manager {    protected var _controller:LayoutController;    private const listener:RTMPListener = new RTMPListener(PacketType.LAYOUT);    private var _container:IModuleContainer;    private var _layout_owner:User;    private var _is_owner:Boolean = false;    private var _panel_ids:Array;    private var _panels_to_init:Array;    //------------ constructor ------------//    public function LayoutManager(registered:Boolean = false) {        super(registered, [ModulesManager]);    }    //------------ initialize ------------//    /**     * 1. Build defaults;     * <br/>     * 2. Load external layouts;     * <br/>     * 3. Make active last used layout;     * <br/>     */    override protected function initialize(reinit:Boolean = false):void {        if (initialized)            return;        if(reinit){            reinitialize();            return;        }        new LayoutElementData();        new LayoutChangeData();        _controller = new LayoutController();        listener.initialize();        listener.addEventListener(RTMPEvent.DATA, handleMessage);        rtmp_history(PacketType.LAYOUT, new Responder(handleHistory, function (...args):void {            error("Layout history load failed");            _failed = true;        }));    }    protected function reinitialize():void{        listener.initialize();        listener.addEventListener(RTMPEvent.DATA, handleMessage);        rtmp_history(PacketType.LAYOUT, new Responder(handleHistoryReconnect, function (...args):void {            error("Layout history load failed");            _failed = true;        }));    }    override public function clear():void{        super.clear();        listener.dispose();        listener.removeEventListener(RTMPEvent.DATA, handleMessage);        _layout_owner = null;        if(_is_owner) _is_owner = false, _container.lock();    }    //--------------- API ----------------//    /**     *     * Set IModuleContainer associated with manager     *     * @param main Main modules container (sub-container)     * @param elements Elements container     */    public function setContainers(main:IModuleContainer, elements:ITreeLayoutElement):void {        _container = main;        // elements container is the element with elementId = 0 (used when we add elements to outer container)        _controller.initElement(elements);    }    /**     *     * Lock layout (only if I am current layout)     *     */    public function lock():void {        rtmp_call("lock_layout", new Responder(success, failure), App.user.sid);        function success(flag:Boolean):void {            !flag && warning('layout is already locked');            _is_owner = false;        }        function failure(...args):void {            warning('failed to lock layout! Is it possible?');        }    }    /**     *     * Try to unlock layout; if server response with success - layout is unlocked     *     */    public function unlock():void {        rtmp_call("unlock_layout", new Responder(success, failure), App.user.sid);        function success(flag:Boolean):void {            !flag && warning('layout is already unlocked');            flag && (_is_owner = true);        }        function failure(...args):void {            warning('failed to unlock layout');        }    }    /**     *     * Switch layout to predefined one.     *     * @param to  Layout index     */    public function switchLayout(to:uint):void {        _is_owner && rtmp_call("layout_switch", null, to);    }    /**     *     * Commit 'add_element' data on server (where panel_id is set and 'layout' message is broadcast)     *     * @param where  Target panel id or 0 if 'add_above'     * @param layout     * @param index  0 or 1     * @param module Module id     * @param instance Module instance id (default = 0)     *     */    public function commitAddElement(where:uint, layout:uint, index:uint, module:String, instance:uint = 0):void {        var w,h:int;        if(layout) w = 100, h = 50;        else w = 50, h = 100;        _is_owner && rtmp_send(PacketType.LAYOUT, new LayoutChangeData({type: "add", to: where, l: layout, i: index, data: new LayoutElementData(w, h, 0, layout, module, instance)}), Recipients.ALL);    }    /**     *     * Commit 'remove_element' data on server     *     * @param what  Target panel id     *     */    public function commitRemoveElement(what:uint):void {        _is_owner && rtmp_send(PacketType.LAYOUT, new LayoutChangeData({type: "remove", from: what}), Recipients.ALL);    }    /**     *     * Commit 'resize' data on server     *     * @param key  Layout group key     * @param delta Resize delta     */    public function commitResizeElement(key:String, delta:Number):void {        _is_owner && rtmp_send(PacketType.LAYOUT, new LayoutChangeData({type: "resize", key: key, d: delta}), Recipients.ALL);    }    /**     *     * Return array of ModuleInstanceData for initiation.     *     */    public function get panels_to_init():Array {        return _panels_to_init;    }    override public function dispose():void {        if (_disposed) return;        listener.dispose();        super.dispose();    }    //------- handlers / callbacks -------//    protected function handleHistory(history:Object):void {        const owner_id = getValue(history, "layout_owner_id", null);        if (owner_id && App.meeting.usersByID[owner_id]) {            _layout_owner = App.meeting.usersByID[owner_id];        }        _controller.preinit(getValue(history, "elements", [], isArray));        _panels_to_init = getValue(history, "modules", [], isArray);        _panel_ids = _panels_to_init.map(function(el:ModuleInstanceData, ind:int, collection:Array):int{ return el.panelId;});        _controller.addEventListener(LayoutEvent.CHANGE, localChangesHandler);        listener.readyToReceive = true;        _initialized = true;    }    protected function handleHistoryReconnect(history:Object):void {        const owner_id = getValue(history, "layout_owner_id", null);        if (owner_id && App.meeting.usersByID[owner_id]) {            _layout_owner = App.meeting.usersByID[owner_id];        }        switchHandler(history);        if(_controller.active){            listener.readyToReceive = true;            _initialized = true;        }else{            _controller.addEventListener(LayoutEvent.ACTIVE, function(e:LayoutEvent):void{                _controller.removeEventListener(LayoutEvent.ACTIVE, arguments.callee);                listener.readyToReceive = true;                _initialized = true;            });        }    }    protected function switchHandler(state:Object):void {        if(!state) return;        var oldElements:Object = _controller.model.elements;        _controller.preinit(getValue(state, "elements", [], isArray));        var modules:Array = getValue(state, "modules", [], isArray);        var panel_ids:Array = modules.map(function(el:ModuleInstanceData, ind:int, collection:Array):int{ return el.panelId;});        // First, create new panels if needed        const newSize:int = panel_ids.length;        var modulesByPanelId:Object = {};        for(i = 0; i < newSize; i++) modulesByPanelId[modules[i].panelId] = modules[i];        var i:int, ind:int;        for (i = 0; i < newSize; i++) {            ind = _panel_ids.indexOf(panel_ids[i]);            if (ind < 0) {                var panel:IModulePanel = _container.createPanel(modulesByPanelId[panel_ids[i]]);                _controller.initElement(panel as ITreeLayoutElement);            } else {                _panel_ids.splice(ind, 1);     // remove from current list 'cause we need to leave only useless panels                _controller.initElement(oldElements[panel_ids[i]]);            }        }        // Second, destroy useless panels        const size:int = _panel_ids.length;        for (i = 0; i < size; i++) {            _container.destroyPanel(oldElements[_panel_ids[i]] as IModulePanel);        }        _panel_ids = panel_ids;        _controller.updateDisplayList();    }    protected function localChangesHandler(e:LayoutEvent):void {        rtmp_send(PacketType.LAYOUT, e.data, Recipients.ALL_EXCLUDE_ME);    }    protected function handleMessage(e:RTMPEvent):void {        var data:LayoutChangeData = e.packet.data as LayoutChangeData;        if (!data) return;     //   debug("layout message",data);        switch (data.type) {            case "move":                _controller.tb_internal::move(data.from, data.to, data.l, data.i);                break;            case "resize":                _controller.tb_internal::resize(data.key, data.d);                break;            case "add":                if (!_container) return;                var layoutData:LayoutElementData = data.data as LayoutElementData;                var panel:IModulePanel = _container.createPanel(new ModuleInstanceData(layoutData.module,layoutData.instance_id,layoutData.id));                _controller.initElement(panel as ITreeLayoutElement);                _panel_ids.push(data.from);                _controller.tb_internal::add(panel.elementId, data.to, data.l, data.i);                break;            case "remove":                _container.destroyPanel(_controller.model.elements[data.from] as IModulePanel);                _controller.tb_internal::removeByID(data.from);                var index:int = _panel_ids.indexOf(data.from);                (index > -1) && _panel_ids.splice(index, 1);                break;            case "unlock":            {                if (App.meeting.usersByID[data.from]) {                    _layout_owner = App.meeting.usersByID[data.from];                    if (_layout_owner.sid == App.user.sid)                        _container.unlock();                    else{                        _container.lock();                        notify(new Notification(translate('layout_unlocked','notifications',_layout_owner.extName)));                    }                }                break;            }            case "lock":            {                _layout_owner = null;                _container.lock();                notify(new Notification(translate('layout_locked','notifications')));                break;            }            case "switch":            {                rtmp_history(PacketType.LAYOUT, new Responder(switchHandler, null));                break;            }            default:                break;        }    }    //------------- get/set --------------//    public function get controller():LayoutController {        return _controller;    }    public function get container():IModuleContainer {        return _container;    }    public function get layout_owner():User {        return _layout_owner;    }    public function get is_owner():Boolean {        return _is_owner;    }}}